{"programModules":{"CREXTPRT":{"program":"CREXTPRT","triggers":{"ExtendOutput":{"name":"ExtendOutput","method":"extendOutput","advice":"POST","active":true,"modified":1712830532982,"modifiedBy":"INFNIXONG","sourceUuid":"de42f973-b408-4848-96bd-c37cf6b1b018","programName":"CREXTPRT","utilities":[],"type":"METHOD","priority":500}},"transactions":{},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"de42f973-b408-4848-96bd-c37cf6b1b018":{"uuid":"de42f973-b408-4848-96bd-c37cf6b1b018","updated":1715928501923,"updatedBy":"INFNIXONG","created":1712830513472,"createdBy":"INFNIXONG","apiVersion":"0.21","beVersion":"16.0.0.20240318172728.4","language":"GROOVY","codeHash":"04ADDE80AF53235175923125AE4301D594D18788221730213FB403FC5BFFCF34","code":"LyoqDQoqICBATmFtZTogQ1JFWFRQUlQuRXh0ZW5kT3V0cHV0DQoqICBARGVzY3JpcHRpb246IEV4dGVuZE91dHB1dCBmb3IgTVdTNDM1UEYsIE1NUzQ4MFBGL01XUzYyMFBGDQoqICBAQXV0aG9yczogTml4b24gUG93ZXIgT25nDQoqLw0KDQovKioNCiogQ0hBTkdFTE9HUw0KKiBWZXJzaW9uICAgIERhdGUgICAgVXNlciAgICAgICAgICAgICAgIERlc2NyaXB0aW9uDQoqIDEuMC4wICAgICAgMjQwMzE1ICBOaXhvbiBQb3dlciBPbmcgICAgSW5pdGlhbCBSZWxlYXNlDQoqIDEuMC4xICAgICAgMjQwNTA4ICBOaXhvbiBQb3dlciBPbmcgICAgQWZ0ZXIgWHRlbmRNMyByZXZpZXcNCiovDQoNCmltcG9ydCBqYXZhLnV0aWwuKjsNCmltcG9ydCBqYXZhLnV0aWwucmVnZXguKjsNCmltcG9ydCBqYXZhLnRpbWUuTG9jYWxEYXRlOw0KaW1wb3J0IGphdmEudGltZS5Mb2NhbERhdGVUaW1lOw0KaW1wb3J0IGphdmEudGltZS5Mb2NhbFRpbWU7DQppbXBvcnQgamF2YS50aW1lLmZvcm1hdC5EYXRlVGltZUZvcm1hdHRlcjsNCmltcG9ydCBqYXZhLnRpbWUuZm9ybWF0LkRhdGVUaW1lUGFyc2VFeGNlcHRpb247DQoNCnB1YmxpYyBjbGFzcyBFeHRlbmRPdXRwdXQgZXh0ZW5kcyBFeHRlbmRNM1RyaWdnZXIgew0KICBwcml2YXRlIGZpbmFsIE1ldGhvZEFQSSBtZXRob2Q7DQogIHByaXZhdGUgZmluYWwgUHJvZ3JhbUFQSSBwcm9ncmFtOw0KICBwcml2YXRlIGZpbmFsIERhdGFiYXNlQVBJIGRhdGFiYXNlOw0KICBwcml2YXRlIGZpbmFsIExvZ2dlckFQSSBsb2dnZXI7DQogIHByaXZhdGUgZmluYWwgTUlDYWxsZXJBUEkgbWlDYWxsZXI7DQogIA0KICBpbnQgTUFYX1JFQ09SRFMgPSAxMDAwMDsNCiAgDQogIHB1YmxpYyBFeHRlbmRPdXRwdXQoTWV0aG9kQVBJIG1ldGhvZCwgUHJvZ3JhbUFQSSBwcm9ncmFtLCBEYXRhYmFzZUFQSSBkYXRhYmFzZSwgTG9nZ2VyQVBJIGxvZ2dlciwgTUlDYWxsZXJBUEkgbWlDYWxsZXIpIHsNCgkgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07DQogICAgdGhpcy5kYXRhYmFzZSA9IGRhdGFiYXNlOw0KICAgIHRoaXMubWV0aG9kID0gbWV0aG9kOw0KICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyOw0KICAgIHRoaXMubWlDYWxsZXIgPSBtaUNhbGxlcjsNCiAgfQ0KICANCiAgcHVibGljIHZvaWQgbWFpbigpIHsNCiAgICBTdHJpbmcgcHJpbnRlckZpbGUgPSBtZXRob2QuZ2V0QXJndW1lbnQoMCkgYXMgU3RyaW5nOw0KICAgIFN0cmluZyBqb2JOdW1iZXIgPSBtZXRob2QuZ2V0QXJndW1lbnQoMSkgYXMgU3RyaW5nOw0KICAgIFN0cmluZyBzdHJ1Y3R1cmUgPSBtZXRob2QuZ2V0QXJndW1lbnQoMikgYXMgU3RyaW5nOw0KICAgIGludCB2YXJpYW50ID0gbWV0aG9kLmdldEFyZ3VtZW50KDMpIGFzIGludDsNCiAgICBpbnQgcnBiayA9IG1ldGhvZC5nZXRBcmd1bWVudCg0KSBhcyBpbnQ7DQogICAgSGFzaE1hcDxTdHJpbmcsIE9iamVjdD4gZmllbGRNYXAgPSBtZXRob2QuZ2V0QXJndW1lbnQoNSkgYXMgSGFzaE1hcDsNCiAgICANCiAgICBsb2dnZXIuZGVidWcoIkBARXh0ZW5kT3V0cHV0IGlzIHJ1bm5pbmciKTsNCg0KICAgIGlmKHByaW50ZXJGaWxlLmVxdWFscygiTU1TNDgwUEYiKSB8fCBwcmludGVyRmlsZS5lcXVhbHMoIk1XUzYyMFBGIikpIHsNCiAgICAgIGlmIChzdHJ1Y3R1cmUuZXF1YWxzKCJDUlZfMDMtMDEiKSkgew0KICAgICAgICBpZiAocnBiayA9PSA2KSB7DQogICAgICAgICAgc3RhcnRNTVM0ODBQRnYzKGZpZWxkTWFwLmdldCgiT1FDT05PIikgYXMgaW50LA0KICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZE1hcC5nZXQoIk9RSU5PVSIpIGFzIGludCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRNYXAuZ2V0KCJPUUNPTk4iKSBhcyBpbnQsDQogICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTWFwLmdldCgiJlNJWkUiKSBhcyBpbnQsDQogICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTWFwLmdldCgiT1FETElYIikgYXMgbG9uZyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgIHN0YXJ0TVdTNDM1UEZ2MShmaWVsZE1hcC5nZXQoIk9RQ09OTyIpIGFzIGludCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRNYXAuZ2V0KCJPUUlOT1UiKSBhcyBpbnQsDQogICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTWFwLmdldCgiT1FDT05OIikgYXMgaW50LA0KICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZE1hcC5nZXQoIiZTSVpFIikgYXMgaW50LA0KICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZE1hcC5nZXQoIk9RRExJWCIpIGFzIGxvbmcpOw0KICAgICAgICB9DQogICAgICB9DQogICAgfSBlbHNlIGlmKHByaW50ZXJGaWxlLmVxdWFscygiTVdTNDM1UEYiKSkgew0KICAgICAgaWYgKHN0cnVjdHVyZS5lcXVhbHMoIkNSVl8wMS0wMSIpKSB7DQogICAgICAgIGlmIChycGJrID09IDYpIHsNCiAgICAgICAgICBzdGFydE1XUzQzNVBGdjEoZmllbGRNYXAuZ2V0KCJPUUNPTk8iKSBhcyBpbnQsDQogICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkTWFwLmdldCgiT1FJTk9VIikgYXMgaW50LA0KICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZE1hcC5nZXQoIk9RQ09OTiIpIGFzIGludCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRNYXAuZ2V0KCImU0laRSIpIGFzIGludCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRNYXAuZ2V0KCJPUURMSVgiKSBhcyBsb25nKTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfQ0KICANCiAgLyoqDQogICAqIEV4dGVuZCBvdXRwdXQgZm9yIE1XUzQzNVBGIHZhcmlhbnQgMQ0KICAgKiBAcGFyYW1zIENPTk8gLSBJbnB1dCBjb21wYW55DQogICAqIEBwYXJhbXMgSU5PVSAtIElucHV0IGRpcmVjdGlvbg0KICAgKiBAcGFyYW1zIENPTk4gLSBJbnB1dCBzaGlwbWVudCBudW1iZXINCiAgICogQHBhcmFtcyBST1dfU0laRSAtIElucHV0IHJvdyBzaXplDQogICAqIEByZXR1cm4gbm90aGluZw0KICAgKi8NCiAgdm9pZCBzdGFydE1XUzQzNVBGdjEoaW50IENPTk8sIGludCBJTk9VLCBpbnQgQ09OTiwgaW50IFJPV19TSVpFLCBsb25nIERMSVgpIHsNCiAgICBkZWxldGVSZWNvcmRzQnlDT05OKENPTk8sIENPTk4sICJFWFQ0MzQiKTsNCiAgICBkZWxldGVSZWNvcmRzQnlDT05OKENPTk8sIENPTk4sICJFWFQ0MzUiKTsNCiAgICBkZWxldGVSZWNvcmRzQnlDT05OKENPTk8sIENPTk4sICJFWFQ0MzYiKTsNCiAgICANCiAgICBkZWxldGVSZWNvcmRzQnlETElYKENPTk8sIERMSVgsICJFWFREMzQiKTsNCiAgICBkZWxldGVSZWNvcmRzQnlETElYKENPTk8sIERMSVgsICJFWFREMzUiKTsNCiAgICBkZWxldGVSZWNvcmRzQnlETElYKENPTk8sIERMSVgsICJFWFREMzYiKTsNCiAgICANCiAgICBEQkFjdGlvbiBxdWVyeSA9IGRhdGFiYXNlLnRhYmxlKCJNSERJU0giKS5pbmRleCgiMjAiKS5zZWxlY3Rpb24oIk9RQ09OTyIsICJPUUlOT1UiLCAiT1FDT05OIiwgIk9RRExJWCIsICJPUUNPTkEiLCAiT1FQR1JTIikuYnVpbGQoKTsNCiAgICBEQkNvbnRhaW5lciBjb250YWluZXIgPSBxdWVyeS5jcmVhdGVDb250YWluZXIoKTsNCiAgICBjb250YWluZXIuc2V0KCJPUUNPTk8iLCBDT05PKTsNCiAgICBjb250YWluZXIuc2V0KCJPUUlOT1UiLCBJTk9VKTsNCiAgICBjb250YWluZXIuc2V0KCJPUUNPTk4iLCBDT05OKTsNCiAgICANCiAgICBBcnJheUxpc3Q8TWFwPFN0cmluZywgU3RyaW5nPj4gTElORVMgPSBuZXcgQXJyYXlMaXN0PE1hcDxTdHJpbmcsIFN0cmluZz4+KCk7DQogICAgQXJyYXlMaXN0PE1hcDxTdHJpbmcsIFN0cmluZz4+IERMSVhfTElORVMgPSBuZXcgQXJyYXlMaXN0PE1hcDxTdHJpbmcsIFN0cmluZz4+KCk7DQogICAgDQogICAgREJBY3Rpb24gcXVlcnlNSERJU0wgPSBkYXRhYmFzZS50YWJsZSgiTUhESVNMIikuaW5kZXgoIjAwIikuc2VsZWN0aW9uKCJVUkNPTk8iLCAiVVJETElYIiwgIlVSSVROTyIsICJVUlJJRE4iLCAiVVJSSURMIikuYnVpbGQoKTsNCiAgICBEQkNvbnRhaW5lciBjb250YWluZXJNSERJU0wgPSBxdWVyeU1IRElTTC5jcmVhdGVDb250YWluZXIoKTsNCiAgICANCiAgICBEQkFjdGlvbiBxdWVyeU1JVE1BSCA9IGRhdGFiYXNlLnRhYmxlKCJNSVRNQUgiKS5pbmRleCgiMDAiKS5zZWxlY3Rpb24oIkhNVFkxNSIsICJITVRYMTUiKS5idWlsZCgpOw0KICAgIERCQ29udGFpbmVyIGNvbnRhaW5lck1JVE1BSCA9IHF1ZXJ5TUlUTUFILmNyZWF0ZUNvbnRhaW5lcigpOw0KICAgIA0KICAgIERCQWN0aW9uIHF1ZXJ5RVhUREVMID0gZGF0YWJhc2UudGFibGUoIkVYVERFTCIpLmluZGV4KCIwMCIpLmJ1aWxkKCk7DQogICAgREJDb250YWluZXIgY29udGFpbmVyRVhUREVMID0gcXVlcnlFWFRERUwuY3JlYXRlQ29udGFpbmVyKCk7DQogICAgY29udGFpbmVyRVhUREVMLnNldCgiRVhDT05PIiwgQ09OTyk7DQogICAgDQogICAgcXVlcnkucmVhZEFsbChjb250YWluZXIsIDMsIE1BWF9SRUNPUkRTLCB7IERCQ29udGFpbmVyIG1oZGlzaERhdGEgLT4NCiAgICAgIE1hcCByZXN1bHQgPSBuZXcgSGFzaE1hcCgpOyANCiAgICAgIA0KICAgICAgbG9uZyBsaW5lRExJWCA9IG1oZGlzaERhdGEuZ2V0KCJPUURMSVgiKSBhcyBsb25nOw0KICAgICAgU3RyaW5nIENPTkEgPSBtaGRpc2hEYXRhLmdldCgiT1FDT05BIik7DQogICAgICBTdHJpbmcgT1FQR1JTID0gIG1oZGlzaERhdGEuZ2V0KCJPUVBHUlMiKTsNCiAgICAgIA0KICAgICAgY29udGFpbmVyTUhESVNMLnNldCgiVVJDT05PIiwgQ09OTyk7DQogICAgICBjb250YWluZXJNSERJU0wuc2V0KCJVUkRMSVgiLCBsaW5lRExJWCk7DQogICAgICBpbnQgY3RyID0gMTsNCiAgICAgIGludCBwYWdlTnVtID0gMTsNCiAgICAgIA0KICAgICAgY29udGFpbmVyRVhUREVMLnNldCgiRVhETElYIiwgbGluZURMSVgpOw0KICAgICAgDQogICAgICBpZighcXVlcnlFWFRERUwucmVhZChjb250YWluZXJFWFRERUwpKSB7DQogICAgICAgIHF1ZXJ5TUhESVNMLnJlYWRBbGwoY29udGFpbmVyTUhESVNMLCAyLCBNQVhfUkVDT1JEUywgeyBEQkNvbnRhaW5lciBtaGRpc2xEYXRhIC0+DQogICAgICAgICAgTWFwIHJlc3VsdExpbmUgPSBuZXcgSGFzaE1hcCgpOyANCiAgICAgICAgICANCiAgICAgICAgICAvLyBDb252ZXJ0cyBJVE5PIHRvIGEgc29ydGFibGUgaW50ZWdlciAoZXguIDEwMTEyMzQgMSAtPiAxMDExMjM0MDEsIDEwMTEyMzQgMjIgLT4gMTAxMTIzNDIyKQ0KICAgICAgICAgIFN0cmluZyBJVE5PID0gbWhkaXNsRGF0YS5nZXQoIlVSSVROTyIpOw0KICAgICAgICAgIFN0cmluZyBJVE4gPSBJVE5PLnJlcGxhY2VBbGwoIlxccysiLCAiICIpOw0KICAgICAgICAgIFN0cmluZ1tdIGl0bm9zID0gSVROLnNwbGl0KCIgIik7DQogICAgICAgICAgU3RyaW5nIG51bVN0cmluZyA9ICIiOw0KICAgICAgICAgIFN0cmluZyBJVE4yID0gIiI7DQogICAgICAgICAgaWYoaXRub3MubGVuZ3RoID4gMSkgew0KICAgICAgICAgICAgaWYoaXRub3NbMV0uaXNOdW1iZXIoKSl7DQogICAgICAgICAgICAgIGludCBudW0gPSBpdG5vc1sxXSBhcyBpbnQ7DQogICAgICAgICAgICAgIA0KICAgICAgICAgICAgICBpZihudW0gPCAxMCkgew0KICAgICAgICAgICAgICAgIG51bVN0cmluZyA9ICIwIiArIG51bTsNCiAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBudW1TdHJpbmcgPSBudW07DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgSVROMiA9IGl0bm9zWzBdICsgbnVtU3RyaW5nOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgSVROMiA9IElUTjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgSVROMiA9IElUTk87DQogICAgICAgICAgfQ0KICAgICAgICAgICANCiAgICAgICAgDQogICAgICAgICAgU3RyaW5nIGJsb2NrTm8gPSBnZXRCbG9jayhDT05PLCBJVE5PKTsNCiAgICAgICAgICBTdHJpbmcgY29sb3IgPSAiIjsNCiAgICAgICAgICBTdHJpbmcgc2l6ZSA9ICIiOw0KICAgICAgICAgIA0KICAgICAgICAgIGNvbnRhaW5lck1JVE1BSC5zZXQoIkhNQ09OTyIsIENPTk8pOw0KICAgICAgICAgIGNvbnRhaW5lck1JVE1BSC5zZXQoIkhNSVROTyIsIElUTk8pOw0KICAgICAgICAgIA0KICAgICAgICAgIGlmIChxdWVyeU1JVE1BSC5yZWFkKGNvbnRhaW5lck1JVE1BSCkpIHsNCiAgICAgICAgICAgIGNvbG9yID0gY29udGFpbmVyTUlUTUFILmdldCgiSE1UWTE1Iik7DQogICAgICAgICAgICBzaXplID0gY29udGFpbmVyTUlUTUFILmdldCgiSE1UWDE1Iik7DQogICAgICAgICAgfQ0KICAgICAgICAgIA0KICAgICAgICAgIHJlc3VsdExpbmUucHV0KCJETElYIiwgbGluZURMSVgpOw0KICAgICAgICAgIHJlc3VsdExpbmUucHV0KCJDT05BIiwgQ09OQS50cmltKCkpOw0KICAgICAgICAgIHJlc3VsdExpbmUucHV0KCJPUk5PIiwgbWhkaXNsRGF0YS5nZXQoIlVSUklETiIpKTsNCiAgICAgICAgICByZXN1bHRMaW5lLnB1dCgiUE9OUiIsIG1oZGlzbERhdGEuZ2V0KCJVUlJJREwiKSBhcyBTdHJpbmcpOw0KICAgICAgICAgIHJlc3VsdExpbmUucHV0KCJJVE5PIiwgSVROTyk7DQogICAgICAgICAgcmVzdWx0TGluZS5wdXQoIklUTjIiLCBJVE4yKTsNCiAgICAgICAgICByZXN1bHRMaW5lLnB1dCgiQ0ZJNCIsIGJsb2NrTm8pOw0KICAgICAgICAgIHJlc3VsdExpbmUucHV0KCJDT0xSIiwgY29sb3IpOw0KICAgICAgICAgIHJlc3VsdExpbmUucHV0KCJTSVpFIiwgc2l6ZSk7DQogICAgICAgIA0KICAgICAgICAgIGlmKGJsb2NrTm8uaXNOdW1iZXIoKSkgew0KICAgICAgICAgICAgaW50IGJsb2NrID0gYmxvY2tObyBhcyBpbnQ7DQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmKGJsb2NrIDw9IDM5OTkpIHsNCiAgICAgICAgICAgICAgcmVzdWx0TGluZS5wdXQoIlRZUEUiLCAiMSIpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgcmVzdWx0TGluZS5wdXQoIlRZUEUiLCAiMiIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgIHJlc3VsdExpbmUucHV0KCJUWVBFIiwgIjAiKTsNCiAgICAgICAgICB9DQogICAgICAgICAgDQogICAgICAgICAgaWYoT1FQR1JTLmVxdWFscygiNTAiKSkgew0KICAgICAgICAgICAgTElORVMuYWRkKHJlc3VsdExpbmUpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICBpZihETElYID09IGxpbmVETElYKSB7DQogICAgICAgICAgICAgIERMSVhfTElORVMuYWRkKHJlc3VsdExpbmUpOw0KICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgY29udGFpbmVyRVhUREVMLnNldCgiRVhETElYIiwgbGluZURMSVgpOw0KICAgICAgICAgICAgICBjb250YWluZXJFWFRERUwuc2V0KCJFWFJHRFQiLCBMb2NhbERhdGUubm93KCkuZm9ybWF0KERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybigieXl5eU1NZGQiKSkudG9JbnRlZ2VyKCkpOw0KICAgICAgICAgICAgICBjb250YWluZXJFWFRERUwuc2V0KCJFWFJHVE0iLCBMb2NhbFRpbWUubm93KCkuZm9ybWF0KERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybigiSEhtbXNzIikpLnRvSW50ZWdlcigpKTsNCiAgICAgICAgICAgICAgY29udGFpbmVyRVhUREVMLnNldCgiRVhMTURUIiwgTG9jYWxEYXRlLm5vdygpLmZvcm1hdChEYXRlVGltZUZvcm1hdHRlci5vZlBhdHRlcm4oInl5eXlNTWRkIikpLnRvSW50ZWdlcigpKTsNCiAgICAgICAgICAgICAgY29udGFpbmVyRVhUREVMLnNldCgiRVhDSE5PIiwgMCk7DQogICAgICAgICAgICAgIGNvbnRhaW5lckVYVERFTC5zZXQoIkVYQ0hJRCIsIHByb2dyYW0uZ2V0VXNlcigpKTsNCiAgICAgICAgICAgICAgDQogICAgICAgICAgICAgIGlmKCFwcm9ncmFtLmdldFVzZXIoKS5lcXVhbHMoIk1PVkVYIikpIHsNCiAgICAgICAgICAgICAgICBxdWVyeUVYVERFTC5pbnNlcnQoY29udGFpbmVyRVhUREVMKTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICB9ICANCiAgICB9KTsNCiAgICAgIA0KICAgIGluc2VydERhdGFUb0VYVDQzNihDT05PLCBDT05OLCBMSU5FUyk7DQogICAgaW5zZXJ0RGF0YVRvRVhURDM2KENPTk8sIERMSVgsIERMSVhfTElORVMpOw0KICAgIA0KICAgIHByb2Nlc3NTb3J0ZWREYXRhQWxsKENPTk8sIENPTk4sIFJPV19TSVpFKTsNCiAgICBwcm9jZXNzU29ydGVkRGF0YVNpbmdsZShDT05PLCBETElYLCBST1dfU0laRSk7DQogICAgDQogICAgY29tcHV0ZVRvdGFsUGFnZUVYVDQzNChDT05PLCBDT05OKTsNCiAgICBjb21wdXRlVG90YWxQYWdlRVhURDM0KENPTk8sIERMSVgpOw0KICB9DQogIA0KICAvKioNCiAgICogR2V0IHRvdGFsIG51bWJlciBvZiBwYWdlcyBmb3IgRVhUNDM0DQogICAqIEBwYXJhbXMgQ09OTyAtIElucHV0IENPTk8NCiAgICogQHBhcmFtcyBDT05OIC0gSW5wdXQgc2hpcG1lbnQgbnVtYmVyDQogICAqIEByZXR1cm4gbm90aGluZw0KICAqLw0KICB2b2lkIGNvbXB1dGVUb3RhbFBhZ2VFWFQ0MzQoaW50IENPTk8sIGludCBDT05OKSB7DQogICAgREJBY3Rpb24gcXVlcnkgPSBkYXRhYmFzZS50YWJsZSgiRVhUNDM0IikuaW5kZXgoIjAwIikuc2VsZWN0aW9uKCJFWENPTkEiLCAiRVhUWVBFIiwgIkVYUEFHRSIpLmJ1aWxkKCk7DQogICAgREJDb250YWluZXIgY29udGFpbmVyID0gcXVlcnkuY3JlYXRlQ29udGFpbmVyKCk7DQogICAgY29udGFpbmVyLnNldCgiRVhDT05PIiwgQ09OTyk7DQogICAgY29udGFpbmVyLnNldCgiRVhDT05OIiwgQ09OTik7DQogICAgDQogICAgQXJyYXlMaXN0PE1hcDxTdHJpbmcsIFN0cmluZz4+IExJTkVTID0gbmV3IEFycmF5TGlzdDxNYXA8U3RyaW5nLCBTdHJpbmc+PigpOw0KICAgIA0KICAgIEFycmF5TGlzdDxNYXA8U3RyaW5nLCBTdHJpbmc+PiBDT05BX0xJTkVTID0gbmV3IEFycmF5TGlzdDxNYXA8U3RyaW5nLCBTdHJpbmc+PigpOw0KICAgDQogICAgU3RyaW5nIGN1cnJDT05BID0gbnVsbDsNCiAgICBpbnQgY3RyID0gMDsNCiAgIA0KICAgIHF1ZXJ5LnJlYWRBbGwoY29udGFpbmVyLCAyLCBNQVhfUkVDT1JEUywgeyBEQkNvbnRhaW5lciBkYXRhIC0+DQogICAgICBNYXAgcmVzdWx0ID0gbmV3IEhhc2hNYXAoKTsgDQogICAgICANCiAgICAgIFN0cmluZyBDT05BID0gZGF0YS5nZXQoIkVYQ09OQSIpOw0KICAgICAgDQogICAgICBpZihjdXJyQ09OQSA9PSBudWxsKSB7DQogICAgICAgIGN1cnJDT05BID0gQ09OQTsNCiAgICAgIH0NCiAgICAgIA0KICAgICAgaWYoIWN1cnJDT05BLmVxdWFscyhDT05BKSkgew0KICAgICAgICB1cGRhdGVNYXhQYWdlRVhUNDM0KENPTk8sIENPTk4sIGN1cnJDT05BLCBjdHIpOw0KICAgICAgICBjdHIgPSAwOw0KICAgICAgICBDT05BX0xJTkVTLmNsZWFyKCk7DQogICAgICAgIGN1cnJDT05BID0gQ09OQTsNCiAgICAgIH0gDQogICAgICANCiAgICAgIHJlc3VsdC5wdXQoIkNPTkEiLCBkYXRhLmdldCgiRVhDT05BIikpOw0KICAgICAgcmVzdWx0LnB1dCgiVFlQRSIsIGRhdGEuZ2V0KCJFWFRZUEUiKSBhcyBTdHJpbmcpOw0KICAgICAgcmVzdWx0LnB1dCgiUEFHRSIsIGRhdGEuZ2V0KCJFWFBBR0UiKSBhcyBTdHJpbmcpOw0KICAgICAgDQogICAgICBDT05BX0xJTkVTLmFkZChyZXN1bHQpOw0KICAgICAgDQogICAgICBjdHIrKzsNCiAgICB9KTsNCiAgICBsb2dnZXIuZGVidWcoIkBAICIgKyBDT05OICsgIiAiICsgY3VyckNPTkEgKyAiICIgKyBjdHIgKyAiICIpOw0KICAgIHVwZGF0ZU1heFBhZ2VFWFQ0MzQoQ09OTywgQ09OTiwgY3VyckNPTkEsIGN0cik7DQogIH0NCiAgDQogIC8qKg0KICAgKiBVcGRhdGUgTVhQRywgRFBHTiBpbiBFWFQ0MzQgVGFibGUNCiAgICogQHBhcmFtcyBDT05PIC0gSW5wdXQgQ09OTw0KICAgKiBAcGFyYW1zIENPTk4gLSBJbnB1dCBzaGlwbWVudCBudW1iZXINCiAgICogQHBhcmFtcyBDT05BIC0gSW5wdXQgY29uc2lnbmVlIG51bWJlcg0KICAgKiBAcGFyYW1zIHZhbCAtIElucHV0IHRvdGFsIHBhZ2VzDQogICAqIEByZXR1cm4gbm90aGluZw0KICAqLw0KICB2b2lkIHVwZGF0ZU1heFBhZ2VFWFQ0MzQoaW50IENPTk8sIGludCBDT05OLCBTdHJpbmcgQ09OQSwgaW50IHZhbCkgew0KICAgIERCQWN0aW9uIHF1ZXJ5ID0gZGF0YWJhc2UudGFibGUoIkVYVDQzNCIpLmluZGV4KCIwMCIpLmJ1aWxkKCk7DQogICAgREJDb250YWluZXIgY29udGFpbmVyID0gcXVlcnkuZ2V0Q29udGFpbmVyKCk7DQogICAgY29udGFpbmVyLnNldCgiRVhDT05PIiwgQ09OTyk7DQogICAgY29udGFpbmVyLnNldCgiRVhDT05OIiwgQ09OTik7DQogICAgY29udGFpbmVyLnNldCgiRVhDT05BIiwgQ09OQSk7DQogICAgDQogICAgaW50IGN0ciA9IDE7DQogICAgDQogICAgQ2xvc3VyZTw/PiB1cGRhdGVDYWxsQmFjayA9IHsgTG9ja2VkUmVzdWx0IGxvY2tlZFJlc3VsdCAtPg0KICAgICAgbG9ja2VkUmVzdWx0LnNldCgiRVhNWFBHIiwgdmFsKTsNCiAgICAgIGxvY2tlZFJlc3VsdC5zZXQoIkVYRFBHTiIsIGN0cik7DQogICAgICBsb2NrZWRSZXN1bHQuc2V0KCJFWENITk8iLCAoaW50KWxvY2tlZFJlc3VsdC5nZXQoIkVYQ0hOTyIpICsgMSk7DQogICAgICBsb2NrZWRSZXN1bHQuc2V0KCJFWExNRFQiLCBMb2NhbERhdGUubm93KCkuZm9ybWF0KERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybigieXl5eU1NZGQiKSkudG9JbnRlZ2VyKCkpOw0KICAgICAgbG9ja2VkUmVzdWx0LnNldCgiRVhDSElEIiwgcHJvZ3JhbS5nZXRVc2VyKCkpOw0KICAgICAgDQogICAgICBsb2NrZWRSZXN1bHQudXBkYXRlKCk7DQogICAgICBjdHIrKzsNCiAgICB9Ow0KICAgIA0KICAgIHF1ZXJ5LnJlYWRBbGxMb2NrKGNvbnRhaW5lciwgMywgdXBkYXRlQ2FsbEJhY2spOw0KICB9DQogIA0KICAvKioNCiAgICogR2V0IHRvdGFsIG51bWJlciBvZiBwYWdlcyBmb3IgRVhUNDM0DQogICAqIEBwYXJhbXMgQ09OTyAtIElucHV0IENPTk8NCiAgICogQHBhcmFtcyBDT05OIC0gSW5wdXQgc2hpcG1lbnQgbnVtYmVyDQogICAqIEByZXR1cm4gbm90aGluZw0KICAqLw0KICB2b2lkIGNvbXB1dGVUb3RhbFBhZ2VFWFREMzQoaW50IENPTk8sIGxvbmcgRExJWCkgew0KICAgIERCQWN0aW9uIHF1ZXJ5ID0gZGF0YWJhc2UudGFibGUoIkVYVEQzNCIpLmluZGV4KCIwMCIpLnNlbGVjdGlvbigiRVhDT05BIiwgIkVYVFlQRSIsICJFWFBBR0UiKS5idWlsZCgpOw0KICAgIERCQ29udGFpbmVyIGNvbnRhaW5lciA9IHF1ZXJ5LmNyZWF0ZUNvbnRhaW5lcigpOw0KICAgIGNvbnRhaW5lci5zZXQoIkVYQ09OTyIsIENPTk8pOw0KICAgIGNvbnRhaW5lci5zZXQoIkVYRExJWCIsIERMSVgpOw0KICAgIA0KICAgIEFycmF5TGlzdDxNYXA8U3RyaW5nLCBTdHJpbmc+PiBMSU5FUyA9IG5ldyBBcnJheUxpc3Q8TWFwPFN0cmluZywgU3RyaW5nPj4oKTsNCiAgICANCiAgICBBcnJheUxpc3Q8TWFwPFN0cmluZywgU3RyaW5nPj4gQ09OQV9MSU5FUyA9IG5ldyBBcnJheUxpc3Q8TWFwPFN0cmluZywgU3RyaW5nPj4oKTsNCiAgIA0KICAgIFN0cmluZyBjdXJyQ09OQSA9IG51bGw7DQogICAgaW50IGN0ciA9IDA7DQogICANCiAgICBxdWVyeS5yZWFkQWxsKGNvbnRhaW5lciwgMiwgTUFYX1JFQ09SRFMsIHsgREJDb250YWluZXIgZGF0YSAtPg0KICAgICAgTWFwIHJlc3VsdCA9IG5ldyBIYXNoTWFwKCk7IA0KICAgICAgDQogICAgICBTdHJpbmcgQ09OQSA9IGRhdGEuZ2V0KCJFWENPTkEiKTsNCiAgICAgIA0KICAgICAgaWYoY3VyckNPTkEgPT0gbnVsbCkgew0KICAgICAgICBjdXJyQ09OQSA9IENPTkE7DQogICAgICB9DQogICAgICANCiAgICAgIGlmKCFjdXJyQ09OQS5lcXVhbHMoQ09OQSkpIHsNCiAgICAgICAgdXBkYXRlTWF4UGFnZUVYVEQzNChDT05PLCBETElYLCBjdXJyQ09OQSwgY3RyKTsNCiAgICAgICAgY3RyID0gMDsNCiAgICAgICAgQ09OQV9MSU5FUy5jbGVhcigpOw0KICAgICAgICBjdXJyQ09OQSA9IENPTkE7DQogICAgICB9IA0KICAgICAgDQogICAgICByZXN1bHQucHV0KCJDT05BIiwgZGF0YS5nZXQoIkVYQ09OQSIpKTsNCiAgICAgIHJlc3VsdC5wdXQoIlRZUEUiLCBkYXRhLmdldCgiRVhUWVBFIikgYXMgU3RyaW5nKTsNCiAgICAgIHJlc3VsdC5wdXQoIlBBR0UiLCBkYXRhLmdldCgiRVhQQUdFIikgYXMgU3RyaW5nKTsNCiAgICAgIA0KICAgICAgQ09OQV9MSU5FUy5hZGQocmVzdWx0KTsNCiAgICAgIA0KICAgICAgY3RyKys7DQogICAgfSk7DQogICAgbG9nZ2VyLmRlYnVnKCJAQCAiICsgRExJWCArICIgIiArIGN1cnJDT05BICsgIiAiICsgY3RyICsgIiAiKTsNCiAgICB1cGRhdGVNYXhQYWdlRVhURDM0KENPTk8sIERMSVgsIGN1cnJDT05BLCBjdHIpOw0KICB9DQogIA0KICAvKioNCiAgICogVXBkYXRlIE1YUEcsIERQR04gaW4gRVhUNDM0IFRhYmxlDQogICAqIEBwYXJhbXMgQ09OTyAtIElucHV0IENPTk8NCiAgICogQHBhcmFtcyBDT05OIC0gSW5wdXQgc2hpcG1lbnQgbnVtYmVyDQogICAqIEBwYXJhbXMgQ09OQSAtIElucHV0IGNvbnNpZ25lZSBudW1iZXINCiAgICogQHBhcmFtcyB2YWwgLSBJbnB1dCB0b3RhbCBwYWdlcw0KICAgKiBAcmV0dXJuIG5vdGhpbmcNCiAgKi8NCiAgdm9pZCB1cGRhdGVNYXhQYWdlRVhURDM0KGludCBDT05PLCBsb25nIERMSVgsIFN0cmluZyBDT05BLCBpbnQgdmFsKSB7DQogICAgREJBY3Rpb24gcXVlcnkgPSBkYXRhYmFzZS50YWJsZSgiRVhURDM0IikuaW5kZXgoIjAwIikuYnVpbGQoKTsNCiAgICBEQkNvbnRhaW5lciBjb250YWluZXIgPSBxdWVyeS5nZXRDb250YWluZXIoKTsNCiAgICBjb250YWluZXIuc2V0KCJFWENPTk8iLCBDT05PKTsNCiAgICBjb250YWluZXIuc2V0KCJFWERMSVgiLCBETElYKTsNCiAgICBjb250YWluZXIuc2V0KCJFWENPTkEiLCBDT05BKTsNCiAgICANCiAgICBpbnQgY3RyID0gMTsNCiAgICANCiAgICBDbG9zdXJlPD8+IHVwZGF0ZUNhbGxCYWNrID0geyBMb2NrZWRSZXN1bHQgbG9ja2VkUmVzdWx0IC0+DQogICAgICBsb2NrZWRSZXN1bHQuc2V0KCJFWE1YUEciLCB2YWwpOw0KICAgICAgbG9ja2VkUmVzdWx0LnNldCgiRVhEUEdOIiwgY3RyKTsNCiAgICAgIGxvY2tlZFJlc3VsdC5zZXQoIkVYQ0hOTyIsIChpbnQpbG9ja2VkUmVzdWx0LmdldCgiRVhDSE5PIikgKyAxKTsNCiAgICAgIGxvY2tlZFJlc3VsdC5zZXQoIkVYTE1EVCIsIExvY2FsRGF0ZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJ5eXl5TU1kZCIpKS50b0ludGVnZXIoKSk7DQogICAgICBsb2NrZWRSZXN1bHQuc2V0KCJFWENISUQiLCBwcm9ncmFtLmdldFVzZXIoKSk7DQogICAgICANCiAgICAgIGxvY2tlZFJlc3VsdC51cGRhdGUoKTsNCiAgICAgIGN0cisrOw0KICAgIH07DQogICAgDQogICAgcXVlcnkucmVhZEFsbExvY2soY29udGFpbmVyLCAzLCB1cGRhdGVDYWxsQmFjayk7DQogIH0NCiAgDQogIC8qKg0KICAgKiBQcm9jZXNzIHNvcnRlZCBkYXRhIGZyb20gRVhUNDM2IGFuZCBjb21wdXRlIHBhZ2UgbnVtYmVyDQogICAqIEBwYXJhbXMgQ09OTyAtIElucHV0IGNvbXBhbnkNCiAgICogQHBhcmFtcyBDT05OIC0gSW5wdXQgc2hpcG1lbnQgbnVtYmVyDQogICAqIEBwYXJhbXMgUk9XX1NJWkUgLSBJbnB1dCByb3cgc2l6ZQ0KICAgKiBAcmV0dXJuIG5vdGhpbmcNCiAgKi8NCiAgdm9pZCBwcm9jZXNzU29ydGVkRGF0YUFsbChpbnQgQ09OTywgaW50IENPTk4sIGludCBST1dfU0laRSkgew0KICAgIERCQWN0aW9uIHNvcnRlZFF1ZXJ5ID0gZGF0YWJhc2UudGFibGUoIkVYVDQzNiIpLmluZGV4KCIwMCIpLnNlbGVjdEFsbEZpZWxkcygpLmJ1aWxkKCk7DQogICAgREJDb250YWluZXIgc29ydGVkQ29udGFpbmVyID0gc29ydGVkUXVlcnkuY3JlYXRlQ29udGFpbmVyKCk7DQogICAgc29ydGVkQ29udGFpbmVyLnNldCgiRVhDT05PIiwgQ09OTyk7DQogICAgc29ydGVkQ29udGFpbmVyLnNldCgiRVhDT05OIiwgQ09OTik7DQogICAgDQogICAgQXJyYXlMaXN0PE1hcDxTdHJpbmcsIFN0cmluZz4+IExJTkVTID0gbmV3IEFycmF5TGlzdDxNYXA8U3RyaW5nLCBTdHJpbmc+PigpOw0KICAgIGludCBjdHIgPSAxOw0KICAgIGludCBwYWdlTnVtID0gMTsNCiAgICANCiAgICBTdHJpbmcgY3VyckNPTkEgPSBudWxsOw0KICAgIGludCBjdXJyVHlwZSA9IC0xOw0KICAgIA0KICAgIERCQWN0aW9uIGxpbmVRdWVyeSA9IGRhdGFiYXNlLnRhYmxlKCJFWFQ0MzUiKS5pbmRleCgiMDAiKS5idWlsZCgpOw0KICAgIERCQ29udGFpbmVyIGxpbmVDb250YWluZXIgPSBsaW5lUXVlcnkuY3JlYXRlQ29udGFpbmVyKCk7DQogICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQ09OTyIsIENPTk8pOw0KICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENPTk4iLCBDT05OKTsNCiAgICANCiAgICBEQkFjdGlvbiBoZWFkUXVlcnkgPSBkYXRhYmFzZS50YWJsZSgiRVhUNDM0IikuaW5kZXgoIjAwIikuYnVpbGQoKTsNCiAgICBEQkNvbnRhaW5lciBoZWFkQ29udGFpbmVyID0gaGVhZFF1ZXJ5LmdldENvbnRhaW5lcigpOw0KICAgIGhlYWRDb250YWluZXIuc2V0KCJFWENPTk8iLCBDT05PKTsNCiAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhDT05OIiwgQ09OTik7DQogICAgICANCiAgICBzb3J0ZWRRdWVyeS5yZWFkQWxsKHNvcnRlZENvbnRhaW5lciwgMiwgTUFYX1JFQ09SRFMsIHsgREJDb250YWluZXIgc29ydGVkRGF0YSAtPg0KICAgICAgU3RyaW5nIENPTkEgPSBzb3J0ZWREYXRhLmdldCgiRVhDT05BIik7DQogICAgICBpbnQgVFlQRSA9IHNvcnRlZERhdGEuZ2V0KCJFWFRZUEUiKTsNCiAgICAgIA0KICAgICAgaWYoY3VyckNPTkEgPT0gbnVsbCAmJiBjdXJyVHlwZSA9PSAtMSkgew0KICAgICAgICBjdXJyQ09OQSA9IENPTkE7DQogICAgICAgIGN1cnJUeXBlID0gVFlQRTsNCiAgICAgIH0NCiAgICAgIA0KICAgICAgaWYoIWN1cnJDT05BLmVxdWFscyhDT05BKSB8fCAoY3VyckNPTkEuZXF1YWxzKENPTkEpICYmIGN1cnJUeXBlICE9IFRZUEUpKSB7DQogICAgICAgIGN0ciA9IDE7DQogICAgICAgIHBhZ2VOdW0gPSAxOw0KICAgICAgICBjdXJyQ09OQSA9IENPTkE7DQogICAgICAgIGN1cnJUeXBlID0gVFlQRTsNCiAgICAgIH0NCiAgICAgIA0KICAgICAgaWYoY3RyID4gUk9XX1NJWkUpIHsNCiAgICAgICAgY3RyID0gMTsNCiAgICAgICAgcGFnZU51bSsrOw0KICAgICAgfQ0KICAgICAgDQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhPUk5PIiwgc29ydGVkRGF0YS5nZXQoIkVYT1JOTyIpKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWFBPTlIiLCBzb3J0ZWREYXRhLmdldCgiRVhQT05SIikpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYRExJWCIsIHNvcnRlZERhdGEuZ2V0KCJFWERMSVgiKSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhDT05BIiwgc29ydGVkRGF0YS5nZXQoIkVYQ09OQSIpKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWElUTk8iLCBzb3J0ZWREYXRhLmdldCgiRVhJVE5PIikpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYSVROMiIsIHNvcnRlZERhdGEuZ2V0KCJFWElUTjIiKSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhDRkk0Iiwgc29ydGVkRGF0YS5nZXQoIkVYQ0ZJNCIpKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWFRZUEUiLCBzb3J0ZWREYXRhLmdldCgiRVhUWVBFIikpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQ09MUiIsIHNvcnRlZERhdGEuZ2V0KCJFWENPTFIiKSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhTSVpFIiwgc29ydGVkRGF0YS5nZXQoIkVYU0laRSIpKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWFBBR0UiLCBwYWdlTnVtKTsNCiAgICAgIA0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYUkdEVCIsIExvY2FsRGF0ZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJ5eXl5TU1kZCIpKS50b0ludGVnZXIoKSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhSR1RNIiwgTG9jYWxUaW1lLm5vdygpLmZvcm1hdChEYXRlVGltZUZvcm1hdHRlci5vZlBhdHRlcm4oIkhIbW1zcyIpKS50b0ludGVnZXIoKSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhMTURUIiwgTG9jYWxEYXRlLm5vdygpLmZvcm1hdChEYXRlVGltZUZvcm1hdHRlci5vZlBhdHRlcm4oInl5eXlNTWRkIikpLnRvSW50ZWdlcigpKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENITk8iLCAwKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENISUQiLCBwcm9ncmFtLmdldFVzZXIoKSk7DQogICAgICANCiAgICAgIGhlYWRDb250YWluZXIuc2V0KCJFWENPTkEiLCBzb3J0ZWREYXRhLmdldCgiRVhDT05BIikpOw0KICAgICAgaGVhZENvbnRhaW5lci5zZXQoIkVYVFlQRSIsIHNvcnRlZERhdGEuZ2V0KCJFWFRZUEUiKSk7DQogICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhQQUdFIiwgcGFnZU51bSk7DQogICAgICANCiAgICAgIGhlYWRDb250YWluZXIuc2V0KCJFWFJHRFQiLCBMb2NhbERhdGUubm93KCkuZm9ybWF0KERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybigieXl5eU1NZGQiKSkudG9JbnRlZ2VyKCkpOw0KICAgICAgaGVhZENvbnRhaW5lci5zZXQoIkVYUkdUTSIsIExvY2FsVGltZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJISG1tc3MiKSkudG9JbnRlZ2VyKCkpOw0KICAgICAgaGVhZENvbnRhaW5lci5zZXQoIkVYTE1EVCIsIExvY2FsRGF0ZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJ5eXl5TU1kZCIpKS50b0ludGVnZXIoKSk7DQogICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhDSE5PIiwgMCk7DQogICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhDSElEIiwgcHJvZ3JhbS5nZXRVc2VyKCkpOw0KICAgICAgDQogICAgICBsaW5lUXVlcnkuaW5zZXJ0KGxpbmVDb250YWluZXIpOw0KICAgICAgaGVhZFF1ZXJ5Lmluc2VydChoZWFkQ29udGFpbmVyKTsNCiAgICAgIA0KICAgICAgY3RyKys7DQogICAgfSk7DQogIH0NCiAgDQogIC8qKg0KICAgKiBQcm9jZXNzIHNvcnRlZCBkYXRhIGZyb20gRVhUNDM2IGFuZCBjb21wdXRlIHBhZ2UgbnVtYmVyDQogICAqIEBwYXJhbXMgQ09OTyAtIElucHV0IGNvbXBhbnkNCiAgICogQHBhcmFtcyBDT05OIC0gSW5wdXQgc2hpcG1lbnQgbnVtYmVyDQogICAqIEBwYXJhbXMgUk9XX1NJWkUgLSBJbnB1dCByb3cgc2l6ZQ0KICAgKiBAcmV0dXJuIG5vdGhpbmcNCiAgKi8NCiAgdm9pZCBwcm9jZXNzU29ydGVkRGF0YVNpbmdsZShpbnQgQ09OTywgbG9uZyBETElYLCBpbnQgUk9XX1NJWkUpIHsNCiAgICBEQkFjdGlvbiBzb3J0ZWRRdWVyeSA9IGRhdGFiYXNlLnRhYmxlKCJFWFREMzYiKS5pbmRleCgiMDAiKS5zZWxlY3RBbGxGaWVsZHMoKS5idWlsZCgpOw0KICAgIERCQ29udGFpbmVyIHNvcnRlZENvbnRhaW5lciA9IHNvcnRlZFF1ZXJ5LmNyZWF0ZUNvbnRhaW5lcigpOw0KICAgIHNvcnRlZENvbnRhaW5lci5zZXQoIkVYQ09OTyIsIENPTk8pOw0KICAgIHNvcnRlZENvbnRhaW5lci5zZXQoIkVYRExJWCIsIERMSVgpOw0KICAgIA0KICAgIEFycmF5TGlzdDxNYXA8U3RyaW5nLCBTdHJpbmc+PiBMSU5FUyA9IG5ldyBBcnJheUxpc3Q8TWFwPFN0cmluZywgU3RyaW5nPj4oKTsNCiAgICBpbnQgY3RyID0gMTsNCiAgICBpbnQgcGFnZU51bSA9IDE7DQogICAgDQogICAgU3RyaW5nIGN1cnJDT05BID0gbnVsbDsNCiAgICBpbnQgY3VyclR5cGUgPSAtMTsNCiAgICANCiAgICBEQkFjdGlvbiBsaW5lUXVlcnkgPSBkYXRhYmFzZS50YWJsZSgiRVhURDM1IikuaW5kZXgoIjAwIikuYnVpbGQoKTsNCiAgICBEQkNvbnRhaW5lciBsaW5lQ29udGFpbmVyID0gbGluZVF1ZXJ5LmNyZWF0ZUNvbnRhaW5lcigpOw0KICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENPTk8iLCBDT05PKTsNCiAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhETElYIiwgRExJWCk7DQogICAgDQogICAgREJBY3Rpb24gaGVhZFF1ZXJ5ID0gZGF0YWJhc2UudGFibGUoIkVYVEQzNCIpLmluZGV4KCIwMCIpLmJ1aWxkKCk7DQogICAgREJDb250YWluZXIgaGVhZENvbnRhaW5lciA9IGhlYWRRdWVyeS5nZXRDb250YWluZXIoKTsNCiAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhDT05PIiwgQ09OTyk7DQogICAgaGVhZENvbnRhaW5lci5zZXQoIkVYRExJWCIsIERMSVgpOw0KICAgICAgDQogICAgc29ydGVkUXVlcnkucmVhZEFsbChzb3J0ZWRDb250YWluZXIsIDIsIE1BWF9SRUNPUkRTLCB7IERCQ29udGFpbmVyIHNvcnRlZERhdGEgLT4NCiAgICAgIFN0cmluZyBDT05BID0gc29ydGVkRGF0YS5nZXQoIkVYQ09OQSIpOw0KICAgICAgaW50IFRZUEUgPSBzb3J0ZWREYXRhLmdldCgiRVhUWVBFIik7DQogICAgICANCiAgICAgIGlmKGN1cnJDT05BID09IG51bGwgJiYgY3VyclR5cGUgPT0gLTEpIHsNCiAgICAgICAgY3VyckNPTkEgPSBDT05BOw0KICAgICAgICBjdXJyVHlwZSA9IFRZUEU7DQogICAgICB9DQogICAgICANCiAgICAgIGlmKCFjdXJyQ09OQS5lcXVhbHMoQ09OQSkgfHwgKGN1cnJDT05BLmVxdWFscyhDT05BKSAmJiBjdXJyVHlwZSAhPSBUWVBFKSkgew0KICAgICAgICBjdHIgPSAxOw0KICAgICAgICBwYWdlTnVtID0gMTsNCiAgICAgICAgY3VyckNPTkEgPSBDT05BOw0KICAgICAgICBjdXJyVHlwZSA9IFRZUEU7DQogICAgICB9DQogICAgICANCiAgICAgIGlmKGN0ciA+IFJPV19TSVpFKSB7DQogICAgICAgIGN0ciA9IDE7DQogICAgICAgIHBhZ2VOdW0rKzsNCiAgICAgIH0NCiAgICAgIA0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYT1JOTyIsIHNvcnRlZERhdGEuZ2V0KCJFWE9STk8iKSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhQT05SIiwgc29ydGVkRGF0YS5nZXQoIkVYUE9OUiIpKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWERMSVgiLCBzb3J0ZWREYXRhLmdldCgiRVhETElYIikpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQ09OQSIsIHNvcnRlZERhdGEuZ2V0KCJFWENPTkEiKSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhJVE5PIiwgc29ydGVkRGF0YS5nZXQoIkVYSVROTyIpKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWElUTjIiLCBzb3J0ZWREYXRhLmdldCgiRVhJVE4yIikpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQ0ZJNCIsIHNvcnRlZERhdGEuZ2V0KCJFWENGSTQiKSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhUWVBFIiwgc29ydGVkRGF0YS5nZXQoIkVYVFlQRSIpKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENPTFIiLCBzb3J0ZWREYXRhLmdldCgiRVhDT0xSIikpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYU0laRSIsIHNvcnRlZERhdGEuZ2V0KCJFWFNJWkUiKSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhQQUdFIiwgcGFnZU51bSk7DQogICAgICANCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWFJHRFQiLCBMb2NhbERhdGUubm93KCkuZm9ybWF0KERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybigieXl5eU1NZGQiKSkudG9JbnRlZ2VyKCkpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYUkdUTSIsIExvY2FsVGltZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJISG1tc3MiKSkudG9JbnRlZ2VyKCkpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYTE1EVCIsIExvY2FsRGF0ZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJ5eXl5TU1kZCIpKS50b0ludGVnZXIoKSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhDSE5PIiwgMCk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhDSElEIiwgcHJvZ3JhbS5nZXRVc2VyKCkpOw0KICAgICAgDQogICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhDT05BIiwgc29ydGVkRGF0YS5nZXQoIkVYQ09OQSIpKTsNCiAgICAgIGhlYWRDb250YWluZXIuc2V0KCJFWFRZUEUiLCBzb3J0ZWREYXRhLmdldCgiRVhUWVBFIikpOw0KICAgICAgaGVhZENvbnRhaW5lci5zZXQoIkVYUEFHRSIsIHBhZ2VOdW0pOw0KICAgICAgDQogICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhSR0RUIiwgTG9jYWxEYXRlLm5vdygpLmZvcm1hdChEYXRlVGltZUZvcm1hdHRlci5vZlBhdHRlcm4oInl5eXlNTWRkIikpLnRvSW50ZWdlcigpKTsNCiAgICAgIGhlYWRDb250YWluZXIuc2V0KCJFWFJHVE0iLCBMb2NhbFRpbWUubm93KCkuZm9ybWF0KERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybigiSEhtbXNzIikpLnRvSW50ZWdlcigpKTsNCiAgICAgIGhlYWRDb250YWluZXIuc2V0KCJFWExNRFQiLCBMb2NhbERhdGUubm93KCkuZm9ybWF0KERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybigieXl5eU1NZGQiKSkudG9JbnRlZ2VyKCkpOw0KICAgICAgaGVhZENvbnRhaW5lci5zZXQoIkVYQ0hOTyIsIDApOw0KICAgICAgaGVhZENvbnRhaW5lci5zZXQoIkVYQ0hJRCIsIHByb2dyYW0uZ2V0VXNlcigpKTsNCiAgICAgIA0KICAgICAgbGluZVF1ZXJ5Lmluc2VydChsaW5lQ29udGFpbmVyKTsNCiAgICAgIGhlYWRRdWVyeS5pbnNlcnQoaGVhZENvbnRhaW5lcik7DQogICAgICANCiAgICAgIGN0cisrOw0KICAgIH0pOw0KICB9DQogIA0KICAvKioNCiAgICogSW5zZXJ0IGRhdGEgdG8gdGhlIEVYVDQzNiB0YWJsZQ0KICAgKiBAcGFyYW1zIENPTk8gLSBJbnB1dCBjb21wYW55DQogICAqIEBwYXJhbXMgQ09OTiAtIElucHV0IHNoaXBtZW50IG51bWJlcg0KICAgKiBAcGFyYW1zIExJTkVTIC0gY29udGFpbmluZyB0aGUgbGluZXMgdG8gYmUgaW5zZXJ0ZWQNCiAgICogQHJldHVybiBub3RoaW5nDQogICovDQogIHZvaWQgaW5zZXJ0RGF0YVRvRVhUNDM2KGludCBDT05PLCBpbnQgQ09OTiwgQXJyYXlMaXN0PE1hcDxTdHJpbmcsIFN0cmluZz4+IExJTkVTKSB7DQogICAgREJBY3Rpb24gbGluZVF1ZXJ5ID0gZGF0YWJhc2UudGFibGUoIkVYVDQzNiIpLmluZGV4KCIwMCIpLmJ1aWxkKCk7DQogICAgREJDb250YWluZXIgbGluZUNvbnRhaW5lciA9IGxpbmVRdWVyeS5nZXRDb250YWluZXIoKTsNCiAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhDT05PIiwgQ09OTyk7DQogICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQ09OTiIsIENPTk4pOw0KICAgIA0KICAgIGZvciAoaW50IGk9MDsgaTxMSU5FUy5zaXplKCk7IGkrKykgew0KICAgICAgTWFwPFN0cmluZywgU3RyaW5nPiByZWNvcmQgPSAoTWFwPFN0cmluZywgU3RyaW5nPikgTElORVNbaV07DQogICAgICANCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWERMSVgiLCByZWNvcmQuRExJWCBhcyBsb25nKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENPTkEiLCByZWNvcmQuQ09OQSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhPUk5PIiwgcmVjb3JkLk9STk8pOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYUE9OUiIsIHJlY29yZC5QT05SIGFzIGludCk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhJVE5PIiwgcmVjb3JkLklUTk8pOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYSVROMiIsIHJlY29yZC5JVE4yKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENGSTQiLCByZWNvcmQuQ0ZJNCk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhUWVBFIiwgcmVjb3JkLlRZUEUgYXMgaW50KTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENPTFIiLCByZWNvcmQuQ09MUik7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhTSVpFIiwgcmVjb3JkLlNJWkUpOw0KICAgICAgDQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhSR0RUIiwgTG9jYWxEYXRlLm5vdygpLmZvcm1hdChEYXRlVGltZUZvcm1hdHRlci5vZlBhdHRlcm4oInl5eXlNTWRkIikpLnRvSW50ZWdlcigpKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWFJHVE0iLCBMb2NhbFRpbWUubm93KCkuZm9ybWF0KERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybigiSEhtbXNzIikpLnRvSW50ZWdlcigpKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWExNRFQiLCBMb2NhbERhdGUubm93KCkuZm9ybWF0KERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybigieXl5eU1NZGQiKSkudG9JbnRlZ2VyKCkpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQ0hOTyIsIDApOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQ0hJRCIsIHByb2dyYW0uZ2V0VXNlcigpKTsNCiAgICAgIA0KICAgICAgbGluZVF1ZXJ5Lmluc2VydChsaW5lQ29udGFpbmVyKTsNCiAgICB9DQogIH0NCiAgDQogIC8qKg0KICAgKiBJbnNlcnQgZGF0YSB0byB0aGUgRVhUNDM2IHRhYmxlDQogICAqIEBwYXJhbXMgQ09OTyAtIElucHV0IGNvbXBhbnkNCiAgICogQHBhcmFtcyBDT05OIC0gSW5wdXQgc2hpcG1lbnQgbnVtYmVyDQogICAqIEBwYXJhbXMgTElORVMgLSBjb250YWluaW5nIHRoZSBsaW5lcyB0byBiZSBpbnNlcnRlZA0KICAgKiBAcmV0dXJuIG5vdGhpbmcNCiAgKi8NCiAgdm9pZCBpbnNlcnREYXRhVG9FWFREMzYoaW50IENPTk8sIGxvbmcgRExJWCwgQXJyYXlMaXN0PE1hcDxTdHJpbmcsIFN0cmluZz4+IExJTkVTKSB7DQogICAgREJBY3Rpb24gbGluZVF1ZXJ5ID0gZGF0YWJhc2UudGFibGUoIkVYVEQzNiIpLmluZGV4KCIwMCIpLmJ1aWxkKCk7DQogICAgREJDb250YWluZXIgbGluZUNvbnRhaW5lciA9IGxpbmVRdWVyeS5nZXRDb250YWluZXIoKTsNCiAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhDT05PIiwgQ09OTyk7DQogICAgbGluZUNvbnRhaW5lci5zZXQoIkVYRExJWCIsIERMSVgpOw0KICAgIA0KICAgIGZvciAoaW50IGk9MDsgaTxMSU5FUy5zaXplKCk7IGkrKykgew0KICAgICAgTWFwPFN0cmluZywgU3RyaW5nPiByZWNvcmQgPSAoTWFwPFN0cmluZywgU3RyaW5nPikgTElORVNbaV07DQogICAgICANCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENPTkEiLCByZWNvcmQuQ09OQSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhPUk5PIiwgcmVjb3JkLk9STk8pOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYUE9OUiIsIHJlY29yZC5QT05SIGFzIGludCk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhJVE5PIiwgcmVjb3JkLklUTk8pOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYSVROMiIsIHJlY29yZC5JVE4yKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENGSTQiLCByZWNvcmQuQ0ZJNCk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhUWVBFIiwgcmVjb3JkLlRZUEUgYXMgaW50KTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENPTFIiLCByZWNvcmQuQ09MUik7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhTSVpFIiwgcmVjb3JkLlNJWkUpOw0KICAgICAgDQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhSR0RUIiwgTG9jYWxEYXRlLm5vdygpLmZvcm1hdChEYXRlVGltZUZvcm1hdHRlci5vZlBhdHRlcm4oInl5eXlNTWRkIikpLnRvSW50ZWdlcigpKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWFJHVE0iLCBMb2NhbFRpbWUubm93KCkuZm9ybWF0KERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybigiSEhtbXNzIikpLnRvSW50ZWdlcigpKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWExNRFQiLCBMb2NhbERhdGUubm93KCkuZm9ybWF0KERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybigieXl5eU1NZGQiKSkudG9JbnRlZ2VyKCkpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQ0hOTyIsIDApOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQ0hJRCIsIHByb2dyYW0uZ2V0VXNlcigpKTsNCiAgICAgIA0KICAgICAgbGluZVF1ZXJ5Lmluc2VydChsaW5lQ29udGFpbmVyKTsNCiAgICB9DQogIH0NCiAgDQogIA0KICAvKioNCiAgICogR2V0IE1NQ0ZJNCAtIEJsb2NrIG51bWJlciBmcm9tIE1JVE1BUw0KICAgKiBAcGFyYW1zIENPTk8gLSBJbnB1dCBjb21wYW55DQogICAqIEBwYXJhbXMgSVROTyAtIElucHV0IGl0ZW0gbnVtYmVyDQogICAqIEByZXR1cm4gYmxvY2sNCiAgKi8NCiAgU3RyaW5nIGdldEJsb2NrKGludCBDT05PLCBTdHJpbmcgSVROTykgew0KICAgIERCQWN0aW9uIHF1ZXJ5ID0gZGF0YWJhc2UudGFibGUoIk1JVE1BUyIpLmluZGV4KCIwMCIpLnNlbGVjdGlvbigiTU1DRkk0IikuYnVpbGQoKTsNCiAgICBEQkNvbnRhaW5lciBjb250YWluZXIgPSBxdWVyeS5jcmVhdGVDb250YWluZXIoKTsNCiAgICBjb250YWluZXIuc2V0KCJNTUNPTk8iLCBDT05PKTsNCiAgICBjb250YWluZXIuc2V0KCJNTUlUTk8iLCBJVE5PKTsNCiAgICANCiAgICBTdHJpbmcgYmxvY2sgPSAiIjsNCiAgICANCiAgICBpZiAocXVlcnkucmVhZChjb250YWluZXIpKSB7DQogICAgICBibG9jayA9IGNvbnRhaW5lci5nZXQoIk1NQ0ZJNCIpOw0KICAgIH0NCiAgICANCiAgICByZXR1cm4gYmxvY2s7DQogIH0NCiAgDQogIC8qKg0KICAgKiBFeHRlbmQgb3V0cHV0IGZvciBNTVM0ODBQRiB2YXJpYW50IDMNCiAgICogQHBhcmFtcyBDT05PIC0gSW5wdXQgY29tcGFueQ0KICAgKiBAcGFyYW1zIElOT1UgLSBJbnB1dCBkaXJlY3Rpb24NCiAgICogQHBhcmFtcyBDT05OIC0gSW5wdXQgc2hpcG1lbnQgbnVtYmVyDQogICAqIEBwYXJhbXMgUk9XX1NJWkUgLSBJbnB1dCByb3cgc2l6ZQ0KICAgKiBAcmV0dXJuIG5vdGhpbmcNCiAgKi8NCiAgdm9pZCBzdGFydE1NUzQ4MFBGdjMoaW50IENPTk8sIGludCBJTk9VLCBpbnQgQ09OTiwgaW50IFJPV19TSVpFLCBsb25nIERMSVgpIHsNCiAgICBkZWxldGVSZWNvcmRzQnlDT05OKENPTk8sIENPTk4sICJFWFQ0NzkiKTsNCiAgICBkZWxldGVSZWNvcmRzQnlDT05OKENPTk8sIENPTk4sICJFWFQ0ODAiKTsNCiAgICANCiAgICBEQkFjdGlvbiBxdWVyeSA9IGRhdGFiYXNlLnRhYmxlKCJNSERJU0giKS5pbmRleCgiMjAiKS5zZWxlY3Rpb24oIk9RQ09OTyIsICJPUUlOT1UiLCAiT1FDT05OIiwgIk9RRExJWCIsICJPUUNPTkEiKS5idWlsZCgpOw0KICAgIERCQ29udGFpbmVyIGNvbnRhaW5lciA9IHF1ZXJ5LmNyZWF0ZUNvbnRhaW5lcigpOw0KICAgIGNvbnRhaW5lci5zZXQoIk9RQ09OTyIsIENPTk8pOw0KICAgIGNvbnRhaW5lci5zZXQoIk9RSU5PVSIsIElOT1UpOw0KICAgIGNvbnRhaW5lci5zZXQoIk9RQ09OTiIsIENPTk4pOw0KICAgIA0KICAgIEFycmF5TGlzdDxNYXA8U3RyaW5nLCBTdHJpbmc+PiBMSU5FUyA9IG5ldyBBcnJheUxpc3Q8TWFwPFN0cmluZywgU3RyaW5nPj4oKTsNCiAgICBBcnJheUxpc3Q8TWFwPFN0cmluZywgU3RyaW5nPj4gRExJWF9MSU5FUyA9IG5ldyBBcnJheUxpc3Q8TWFwPFN0cmluZywgU3RyaW5nPj4oKTsNCiAgICANCiAgICBEQkFjdGlvbiBxdWVyeU1IRElTTCA9IGRhdGFiYXNlLnRhYmxlKCJNSERJU0wiKS5pbmRleCgiMDAiKS5zZWxlY3Rpb24oIlVSQ09OTyIsICJVUkRMSVgiLCAiVVJJVE5PIiwgIlVSUklETiIsICJVUlJJREwiKS5idWlsZCgpOw0KICAgIERCQ29udGFpbmVyIGNvbnRhaW5lck1IRElTTCA9IHF1ZXJ5TUhESVNMLmNyZWF0ZUNvbnRhaW5lcigpOw0KICAgIA0KICAgIHF1ZXJ5LnJlYWRBbGwoY29udGFpbmVyLCAzLCBNQVhfUkVDT1JEUywgeyBEQkNvbnRhaW5lciBtaGRpc2hEYXRhIC0+DQogICAgICBNYXAgcmVzdWx0ID0gbmV3IEhhc2hNYXAoKTsgDQogICAgICANCiAgICAgIGxvbmcgbGluZURMSVggPSBtaGRpc2hEYXRhLmdldCgiT1FETElYIikgYXMgbG9uZzsNCiAgICAgIFN0cmluZyBDT05BID0gbWhkaXNoRGF0YS5nZXQoIk9RQ09OQSIpOw0KICAgICAgDQogICAgICBjb250YWluZXJNSERJU0wuc2V0KCJVUkNPTk8iLCBDT05PKTsNCiAgICAgIGNvbnRhaW5lck1IRElTTC5zZXQoIlVSRExJWCIsIGxpbmVETElYKTsNCiAgICAgIA0KICAgICAgaW50IGN0ciA9IDE7DQogICAgICBpbnQgcGFnZU51bSA9IDE7DQogICAgDQogICAgICBxdWVyeU1IRElTTC5yZWFkQWxsKGNvbnRhaW5lck1IRElTTCwgMiwgTUFYX1JFQ09SRFMsIHsgREJDb250YWluZXIgbWhkaXNsRGF0YSAtPg0KICAgICAgICBNYXAgcmVzdWx0TGluZSA9IG5ldyBIYXNoTWFwKCk7IA0KICAgICAgICANCiAgICAgICAgaWYoY3RyID4gUk9XX1NJWkUpIHsNCiAgICAgICAgICBjdHIgPSAxOw0KICAgICAgICAgIHBhZ2VOdW0rKzsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgcmVzdWx0TGluZS5wdXQoIkRMSVgiLCBtaGRpc2hEYXRhLmdldCgiT1FETElYIikgYXMgU3RyaW5nKTsNCiAgICAgICAgcmVzdWx0TGluZS5wdXQoIkNPTkEiLCBDT05BLnRyaW0oKSk7DQogICAgICAgIHJlc3VsdExpbmUucHV0KCJPUk5PIiwgbWhkaXNsRGF0YS5nZXQoIlVSUklETiIpKTsNCiAgICAgICAgcmVzdWx0TGluZS5wdXQoIlBPTlIiLCBtaGRpc2xEYXRhLmdldCgiVVJSSURMIikgYXMgU3RyaW5nKTsNCiAgICAgICAgcmVzdWx0TGluZS5wdXQoIklUTk8iLCBtaGRpc2xEYXRhLmdldCgiVVJJVE5PIikpOw0KICAgICAgICByZXN1bHRMaW5lLnB1dCgiUEFHRSIsIHBhZ2VOdW0pOw0KICAgICAgICANCiAgICAgICAgTElORVMuYWRkKHJlc3VsdExpbmUpOw0KICAgICAgICANCiAgICAgICAgaWYoRExJWCA9PSBsaW5lRExJWCkgew0KICAgICAgICAgIERMSVhfTElORVMuYWRkKHJlc3VsdExpbmUpOw0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBjdHIrKzsNCiAgICAgIH0pOw0KICAgICAgDQogICAgfSk7DQogICANCiAgICBpbnNlcnREYXRhVG9FWFQ0ODAoQ09OTywgQ09OTiwgTElORVMpOw0KICAgIGluc2VydERhdGFUb0VYVEQ4MChDT05PLCBETElYLCBETElYX0xJTkVTKTsNCiAgICANCiAgICBjb21wdXRlVG90YWxQYWdlRVhUNDc5KENPTk8sIENPTk4pOw0KICAgIGNvbXB1dGVUb3RhbFBhZ2VFWFRENzkoQ09OTywgRExJWCk7DQogIH0NCiAgDQogIC8qKg0KICAgKiBHZXQgdG90YWwgbnVtYmVyIG9mIHBhZ2VzIGZvciBFWFQ0NzkNCiAgICogQHBhcmFtcyBDT05PIC0gSW5wdXQgQ09OTw0KICAgKiBAcGFyYW1zIENPTk4gLSBJbnB1dCBzaGlwbWVudCBudW1iZXINCiAgICogQHJldHVybiBub3RoaW5nDQogICovDQogIHZvaWQgY29tcHV0ZVRvdGFsUGFnZUVYVDQ3OShpbnQgQ09OTywgaW50IENPTk4pIHsNCiAgICBEQkFjdGlvbiBxdWVyeSA9IGRhdGFiYXNlLnRhYmxlKCJFWFQ0NzkiKS5pbmRleCgiMDAiKS5zZWxlY3Rpb24oIkVYRExJWCIsICJFWENPTkEiLCAiRVhUWVBFIiwgIkVYUEFHRSIpLmJ1aWxkKCk7DQogICAgREJDb250YWluZXIgY29udGFpbmVyID0gcXVlcnkuY3JlYXRlQ29udGFpbmVyKCk7DQogICAgY29udGFpbmVyLnNldCgiRVhDT05PIiwgQ09OTyk7DQogICAgY29udGFpbmVyLnNldCgiRVhDT05OIiwgQ09OTik7DQogICAgDQogICAgQXJyYXlMaXN0PE1hcDxTdHJpbmcsIFN0cmluZz4+IExJTkVTID0gbmV3IEFycmF5TGlzdDxNYXA8U3RyaW5nLCBTdHJpbmc+PigpOw0KICAgIA0KICAgIEFycmF5TGlzdDxNYXA8U3RyaW5nLCBTdHJpbmc+PiBETElYX0xJTkVTID0gbmV3IEFycmF5TGlzdDxNYXA8U3RyaW5nLCBTdHJpbmc+PigpOw0KICAgDQogICAgbG9uZyBjdXJyRExJWCA9IC0xOw0KICAgIGludCBjdHIgPSAwOw0KICAgDQogICAgcXVlcnkucmVhZEFsbChjb250YWluZXIsIDIsIE1BWF9SRUNPUkRTLCB7IERCQ29udGFpbmVyIGRhdGEgLT4NCiAgICAgIE1hcCByZXN1bHQgPSBuZXcgSGFzaE1hcCgpOyANCiAgICAgIA0KICAgICAgbG9uZyBETElYID0gZGF0YS5nZXQoIkVYRExJWCIpOw0KICAgICAgDQogICAgICBpZihjdXJyRExJWCA9PSAtMSkgew0KICAgICAgICBjdXJyRExJWCA9IERMSVg7DQogICAgICB9DQogICAgICANCiAgICAgIGlmKGN1cnJETElYICE9IERMSVgpIHsNCiAgICAgICAgdXBkYXRlTWF4UGFnZUVYVDQ3OShDT05PLCBDT05OLCBjdXJyRExJWCwgY3RyKTsNCiAgICAgICAgY3RyID0gMDsNCiAgICAgICAgRExJWF9MSU5FUy5jbGVhcigpOw0KICAgICAgICBjdXJyRExJWCA9IERMSVg7DQogICAgICB9IA0KICAgICAgDQogICAgICByZXN1bHQucHV0KCJETElYIiwgZGF0YS5nZXQoIkVYRExJWCIpIGFzIFN0cmluZyk7DQogICAgICByZXN1bHQucHV0KCJDT05BIiwgZGF0YS5nZXQoIkVYQ09OQSIpKTsNCiAgICAgIHJlc3VsdC5wdXQoIlRZUEUiLCBkYXRhLmdldCgiRVhUWVBFIikgYXMgU3RyaW5nKTsNCiAgICAgIHJlc3VsdC5wdXQoIlBBR0UiLCBkYXRhLmdldCgiRVhQQUdFIikgYXMgU3RyaW5nKTsNCiAgICAgIA0KICAgICAgRExJWF9MSU5FUy5hZGQocmVzdWx0KTsNCiAgICAgIA0KICAgICAgY3RyKys7DQogICAgfSk7DQogICAgDQogICAgdXBkYXRlTWF4UGFnZUVYVDQ3OShDT05PLCBDT05OLCBjdXJyRExJWCwgY3RyKTsNCiAgfQ0KICANCiAgLyoqDQogICAqIFVwZGF0ZSBNWFBHLCBEUEdOIGluIEVYVDQ3OSBUYWJsZQ0KICAgKiBAcGFyYW1zIENPTk8gLSBJbnB1dCBDT05PDQogICAqIEBwYXJhbXMgQ09OTiAtIElucHV0IHNoaXBtZW50IG51bWJlcg0KICAgKiBAcGFyYW1zIERMSVggLSBJbnB1dCBkZWxpdmVyeSBudW1iZXINCiAgICogQHBhcmFtcyB2YWwgLSBJbnB1dCB0b3RhbCBwYWdlcw0KICAgKiBAcmV0dXJuIG5vdGhpbmcNCiAgKi8NCiAgdm9pZCB1cGRhdGVNYXhQYWdlRVhUNDc5KGludCBDT05PLCBpbnQgQ09OTiwgbG9uZyBETElYLCBpbnQgdmFsKSB7DQogICAgREJBY3Rpb24gcXVlcnkgPSBkYXRhYmFzZS50YWJsZSgiRVhUNDc5IikuaW5kZXgoIjAwIikuYnVpbGQoKTsNCiAgICBEQkNvbnRhaW5lciBjb250YWluZXIgPSBxdWVyeS5nZXRDb250YWluZXIoKTsNCiAgICBjb250YWluZXIuc2V0KCJFWENPTk8iLCBDT05PKTsNCiAgICBjb250YWluZXIuc2V0KCJFWENPTk4iLCBDT05OKTsNCiAgICBjb250YWluZXIuc2V0KCJFWERMSVgiLCBETElYKTsNCiAgICANCiAgICBpbnQgY3RyID0gMTsNCiAgICANCiAgICBDbG9zdXJlPD8+IHVwZGF0ZUNhbGxCYWNrID0geyBMb2NrZWRSZXN1bHQgbG9ja2VkUmVzdWx0IC0+DQogICAgICBsb2NrZWRSZXN1bHQuc2V0KCJFWE1YUEciLCB2YWwpOw0KICAgICAgbG9ja2VkUmVzdWx0LnNldCgiRVhEUEdOIiwgY3RyKTsNCiAgICAgIGxvY2tlZFJlc3VsdC5zZXQoIkVYQ0hOTyIsIChpbnQpbG9ja2VkUmVzdWx0LmdldCgiRVhDSE5PIikgKyAxKTsNCiAgICAgIGxvY2tlZFJlc3VsdC5zZXQoIkVYTE1EVCIsIExvY2FsRGF0ZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJ5eXl5TU1kZCIpKS50b0ludGVnZXIoKSk7DQogICAgICBsb2NrZWRSZXN1bHQuc2V0KCJFWENISUQiLCBwcm9ncmFtLmdldFVzZXIoKSk7DQogICAgICANCiAgICAgIGxvY2tlZFJlc3VsdC51cGRhdGUoKTsNCiAgICAgIGN0cisrOw0KICAgIH07DQogICAgDQogICAgcXVlcnkucmVhZEFsbExvY2soY29udGFpbmVyLCAzLCB1cGRhdGVDYWxsQmFjayk7DQogIH0NCiAgDQogIC8qKg0KICAgKiBHZXQgdG90YWwgbnVtYmVyIG9mIHBhZ2VzIGZvciBFWFQ0NzkNCiAgICogQHBhcmFtcyBDT05PIC0gSW5wdXQgQ09OTw0KICAgKiBAcGFyYW1zIENPTk4gLSBJbnB1dCBzaGlwbWVudCBudW1iZXINCiAgICogQHJldHVybiBub3RoaW5nDQogICovDQogIHZvaWQgY29tcHV0ZVRvdGFsUGFnZUVYVEQ3OShpbnQgQ09OTywgbG9uZyBETElYKSB7DQogICAgREJBY3Rpb24gcXVlcnkgPSBkYXRhYmFzZS50YWJsZSgiRVhURDc5IikuaW5kZXgoIjAwIikuc2VsZWN0aW9uKCJFWERMSVgiLCAiRVhDT05BIiwgIkVYVFlQRSIsICJFWFBBR0UiKS5idWlsZCgpOw0KICAgIERCQ29udGFpbmVyIGNvbnRhaW5lciA9IHF1ZXJ5LmNyZWF0ZUNvbnRhaW5lcigpOw0KICAgIGNvbnRhaW5lci5zZXQoIkVYQ09OTyIsIENPTk8pOw0KICAgIGNvbnRhaW5lci5zZXQoIkVYRExJWCIsIERMSVgpOw0KICAgIA0KICAgIEFycmF5TGlzdDxNYXA8U3RyaW5nLCBTdHJpbmc+PiBMSU5FUyA9IG5ldyBBcnJheUxpc3Q8TWFwPFN0cmluZywgU3RyaW5nPj4oKTsNCiAgICANCiAgICBBcnJheUxpc3Q8TWFwPFN0cmluZywgU3RyaW5nPj4gRExJWF9MSU5FUyA9IG5ldyBBcnJheUxpc3Q8TWFwPFN0cmluZywgU3RyaW5nPj4oKTsNCiAgIA0KICAgIGxvbmcgY3VyckRMSVggPSAtMTsNCiAgICBpbnQgY3RyID0gMDsNCiAgIA0KICAgIHF1ZXJ5LnJlYWRBbGwoY29udGFpbmVyLCAyLCBNQVhfUkVDT1JEUywgeyBEQkNvbnRhaW5lciBkYXRhIC0+DQogICAgICBNYXAgcmVzdWx0ID0gbmV3IEhhc2hNYXAoKTsgDQogICAgICANCiAgICAgIGxvbmcgbGluZURMSVggPSBkYXRhLmdldCgiRVhETElYIik7DQogICAgICANCiAgICAgIGlmKGN1cnJETElYID09IC0xKSB7DQogICAgICAgIGN1cnJETElYID0gbGluZURMSVg7DQogICAgICB9DQogICAgICANCiAgICAgIGlmKGN1cnJETElYICE9IGxpbmVETElYKSB7DQogICAgICAgIHVwZGF0ZU1heFBhZ2VFWFRENzkoQ09OTywgY3VyckRMSVgsIGN0cik7DQogICAgICAgIGN0ciA9IDA7DQogICAgICAgIERMSVhfTElORVMuY2xlYXIoKTsNCiAgICAgICAgY3VyckRMSVggPSBsaW5lRExJWDsNCiAgICAgIH0gDQogICAgICANCiAgICAgIHJlc3VsdC5wdXQoIkNPTkEiLCBkYXRhLmdldCgiRVhDT05BIikpOw0KICAgICAgcmVzdWx0LnB1dCgiVFlQRSIsIGRhdGEuZ2V0KCJFWFRZUEUiKSBhcyBTdHJpbmcpOw0KICAgICAgcmVzdWx0LnB1dCgiUEFHRSIsIGRhdGEuZ2V0KCJFWFBBR0UiKSBhcyBTdHJpbmcpOw0KICAgICAgDQogICAgICBETElYX0xJTkVTLmFkZChyZXN1bHQpOw0KICAgICAgDQogICAgICBjdHIrKzsNCiAgICB9KTsNCiAgICANCiAgICB1cGRhdGVNYXhQYWdlRVhURDc5KENPTk8sIERMSVgsIGN0cik7DQogIH0NCiAgDQogIC8qKg0KICAgKiBVcGRhdGUgTVhQRywgRFBHTiBpbiBFWFQ0NzkgVGFibGUNCiAgICogQHBhcmFtcyBDT05PIC0gSW5wdXQgQ09OTw0KICAgKiBAcGFyYW1zIENPTk4gLSBJbnB1dCBzaGlwbWVudCBudW1iZXINCiAgICogQHBhcmFtcyBETElYIC0gSW5wdXQgZGVsaXZlcnkgbnVtYmVyDQogICAqIEBwYXJhbXMgdmFsIC0gSW5wdXQgdG90YWwgcGFnZXMNCiAgICogQHJldHVybiBub3RoaW5nDQogICovDQogIHZvaWQgdXBkYXRlTWF4UGFnZUVYVEQ3OShpbnQgQ09OTywgbG9uZyBETElYLCBpbnQgdmFsKSB7DQogICAgREJBY3Rpb24gcXVlcnkgPSBkYXRhYmFzZS50YWJsZSgiRVhUNDc5IikuaW5kZXgoIjAwIikuYnVpbGQoKTsNCiAgICBEQkNvbnRhaW5lciBjb250YWluZXIgPSBxdWVyeS5nZXRDb250YWluZXIoKTsNCiAgICBjb250YWluZXIuc2V0KCJFWENPTk8iLCBDT05PKTsNCiAgICBjb250YWluZXIuc2V0KCJFWERMSVgiLCBETElYKTsNCiAgICANCiAgICBpbnQgY3RyID0gMTsNCiAgICANCiAgICBDbG9zdXJlPD8+IHVwZGF0ZUNhbGxCYWNrID0geyBMb2NrZWRSZXN1bHQgbG9ja2VkUmVzdWx0IC0+DQogICAgICBsb2NrZWRSZXN1bHQuc2V0KCJFWE1YUEciLCB2YWwpOw0KICAgICAgbG9ja2VkUmVzdWx0LnNldCgiRVhEUEdOIiwgY3RyKTsNCiAgICAgIGxvY2tlZFJlc3VsdC5zZXQoIkVYQ0hOTyIsIChpbnQpbG9ja2VkUmVzdWx0LmdldCgiRVhDSE5PIikgKyAxKTsNCiAgICAgIGxvY2tlZFJlc3VsdC5zZXQoIkVYTE1EVCIsIExvY2FsRGF0ZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJ5eXl5TU1kZCIpKS50b0ludGVnZXIoKSk7DQogICAgICBsb2NrZWRSZXN1bHQuc2V0KCJFWENISUQiLCBwcm9ncmFtLmdldFVzZXIoKSk7DQogICAgICANCiAgICAgIGxvY2tlZFJlc3VsdC51cGRhdGUoKTsNCiAgICAgIGN0cisrOw0KICAgIH07DQogICAgDQogICAgcXVlcnkucmVhZEFsbExvY2soY29udGFpbmVyLCAzLCB1cGRhdGVDYWxsQmFjayk7DQogIH0NCiAgDQogIC8qKg0KICAgKiBDaGVjayBDT05BLUNvbnNpZ25lZSBpZiBzdGFydHMgd2l0aCAyMzAxIG9yIDIzMDINCiAgICogQHBhcmFtcyBDT05BIC0gSW5wdXQgY29uc2lnbmVlDQogICAqIEBwYXJhbXMgQ09OTiAtIElucHV0IHNoaXBtZW50IG51bWJlcg0KICAgKiBAcmV0dXJuIGJvb2xlYW4NCiAgKi8NCiAgYm9vbGVhbiBjaGVja0NPTkEoU3RyaW5nIENPTkEpIHsNCiAgICBpZihDT05BLmxlbmd0aCgpID49IDQpIHsNCiAgICAgIGNoYXJbXSBjaCA9IENPTkEudG9DaGFyQXJyYXkoKTsNCiAgICAgIGlmKGNoWzBdID09ICcyJyAmJiBjaFsxXSA9PSAnMycgJiYgY2hbMl0gPT0gJzAnICYmIChjaFszXSA9PSAnMScgfHwgY2hbM10gPT0gJzInKSkgew0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCiAgfQ0KICANCiAgLyoqDQogICAqIEluc2VydCBkYXRhIHRvIHRoZSBFWFQ0ODAgdGFibGUNCiAgICogQHBhcmFtcyBDT05PIC0gSW5wdXQgY29tcGFueQ0KICAgKiBAcGFyYW1zIENPTk4gLSBJbnB1dCBzaGlwbWVudCBudW1iZXINCiAgICogQHBhcmFtcyBMSU5FUyAtIGNvbnRhaW5pbmcgdGhlIGxpbmVzIHRvIGJlIGluc2VydGVkDQogICAqIEByZXR1cm4gbm90aGluZw0KICAqLw0KICB2b2lkIGluc2VydERhdGFUb0VYVDQ4MChpbnQgQ09OTywgaW50IENPTk4sIEFycmF5TGlzdDxNYXA8U3RyaW5nLCBTdHJpbmc+PiBMSU5FUykgew0KICAgIERCQWN0aW9uIGxpbmVRdWVyeSA9IGRhdGFiYXNlLnRhYmxlKCJFWFQ0ODAiKS5pbmRleCgiMDAiKS5idWlsZCgpOw0KICAgIERCQ29udGFpbmVyIGxpbmVDb250YWluZXIgPSBsaW5lUXVlcnkuZ2V0Q29udGFpbmVyKCk7DQogICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQ09OTyIsIENPTk8pOw0KICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENPTk4iLCBDT05OKTsNCiAgICANCiAgICBEQkFjdGlvbiBoZWFkUXVlcnkgPSBkYXRhYmFzZS50YWJsZSgiRVhUNDc5IikuaW5kZXgoIjAwIikuYnVpbGQoKTsNCiAgICBEQkNvbnRhaW5lciBoZWFkQ29udGFpbmVyID0gaGVhZFF1ZXJ5LmdldENvbnRhaW5lcigpOw0KICAgIGhlYWRDb250YWluZXIuc2V0KCJFWENPTk8iLCBDT05PKTsNCiAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhDT05OIiwgQ09OTik7DQogICAgDQogICAgZm9yIChpbnQgaT0wOyBpPExJTkVTLnNpemUoKTsgaSsrKSB7DQogICAgICBNYXA8U3RyaW5nLCBTdHJpbmc+IHJlY29yZCA9IChNYXA8U3RyaW5nLCBTdHJpbmc+KSBMSU5FU1tpXTsNCiAgICAgIA0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYRExJWCIsIHJlY29yZC5ETElYIGFzIGxvbmcpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQ09OQSIsIHJlY29yZC5DT05BKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWFBBR0UiLCByZWNvcmQuUEFHRSBhcyBpbnQpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYT1JOTyIsIHJlY29yZC5PUk5PKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWFBPTlIiLCByZWNvcmQuUE9OUiBhcyBpbnQpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYSVROTyIsIHJlY29yZC5JVE5PKTsNCiAgICAgIA0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYUkdEVCIsIExvY2FsRGF0ZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJ5eXl5TU1kZCIpKS50b0ludGVnZXIoKSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhSR1RNIiwgTG9jYWxUaW1lLm5vdygpLmZvcm1hdChEYXRlVGltZUZvcm1hdHRlci5vZlBhdHRlcm4oIkhIbW1zcyIpKS50b0ludGVnZXIoKSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhMTURUIiwgTG9jYWxEYXRlLm5vdygpLmZvcm1hdChEYXRlVGltZUZvcm1hdHRlci5vZlBhdHRlcm4oInl5eXlNTWRkIikpLnRvSW50ZWdlcigpKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENITk8iLCAwKTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENISUQiLCBwcm9ncmFtLmdldFVzZXIoKSk7DQogICAgICANCiAgICAgIGhlYWRDb250YWluZXIuc2V0KCJFWERMSVgiLCByZWNvcmQuRExJWCBhcyBsb25nKTsNCiAgICAgIGhlYWRDb250YWluZXIuc2V0KCJFWENPTkEiLCByZWNvcmQuQ09OQSk7DQogICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhQQUdFIiwgcmVjb3JkLlBBR0UgYXMgaW50KTsNCiAgICAgIA0KICAgICAgaGVhZENvbnRhaW5lci5zZXQoIkVYUkdEVCIsIExvY2FsRGF0ZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJ5eXl5TU1kZCIpKS50b0ludGVnZXIoKSk7DQogICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhSR1RNIiwgTG9jYWxUaW1lLm5vdygpLmZvcm1hdChEYXRlVGltZUZvcm1hdHRlci5vZlBhdHRlcm4oIkhIbW1zcyIpKS50b0ludGVnZXIoKSk7DQogICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhMTURUIiwgTG9jYWxEYXRlLm5vdygpLmZvcm1hdChEYXRlVGltZUZvcm1hdHRlci5vZlBhdHRlcm4oInl5eXlNTWRkIikpLnRvSW50ZWdlcigpKTsNCiAgICAgIGhlYWRDb250YWluZXIuc2V0KCJFWENITk8iLCAwKTsNCiAgICAgIGhlYWRDb250YWluZXIuc2V0KCJFWENISUQiLCBwcm9ncmFtLmdldFVzZXIoKSk7DQogICAgICANCiAgICAgIGlmKGNoZWNrQ09OQShyZWNvcmQuQ09OQSkpIHsNCiAgICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYVFlQRSIsIDEpOw0KICAgICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhBTU5UIiwgOTkuOTkpOw0KICAgICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhUWVBFIiwgMSk7DQogICAgICAgIA0KICAgICAgICBsaW5lUXVlcnkuaW5zZXJ0KGxpbmVDb250YWluZXIpOw0KICAgICAgICBoZWFkUXVlcnkuaW5zZXJ0KGhlYWRDb250YWluZXIpOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYVFlQRSIsIDEpOw0KICAgICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhBTU5UIiwgOTkuOTkpOw0KICAgICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhUWVBFIiwgMSk7DQogICAgICAgIA0KICAgICAgICBsaW5lUXVlcnkuaW5zZXJ0KGxpbmVDb250YWluZXIpOw0KICAgICAgICBoZWFkUXVlcnkuaW5zZXJ0KGhlYWRDb250YWluZXIpOw0KICAgICAgICANCiAgICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYVFlQRSIsIDIpOw0KICAgICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhBTU5UIiwgMCk7DQogICAgICAgIGhlYWRDb250YWluZXIuc2V0KCJFWFRZUEUiLCAyKTsNCiAgICAgICAgDQogICAgICAgIGxpbmVRdWVyeS5pbnNlcnQobGluZUNvbnRhaW5lcik7DQogICAgICAgIGhlYWRRdWVyeS5pbnNlcnQoaGVhZENvbnRhaW5lcik7DQogICAgICAgIA0KICAgICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhUWVBFIiwgMyk7DQogICAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWEFNTlQiLCA5OS45OSk7DQogICAgICAgIGhlYWRDb250YWluZXIuc2V0KCJFWFRZUEUiLCAzKTsNCiAgICAgICAgDQogICAgICAgIGxpbmVRdWVyeS5pbnNlcnQobGluZUNvbnRhaW5lcik7DQogICAgICAgIGhlYWRRdWVyeS5pbnNlcnQoaGVhZENvbnRhaW5lcik7DQogICAgICB9DQogICAgIA0KICAgIH0NCiAgfQ0KICANCiAgLyoqDQogICAqIEluc2VydCBkYXRhIHRvIHRoZSBFWFQ0ODAgdGFibGUNCiAgICogQHBhcmFtcyBDT05PIC0gSW5wdXQgY29tcGFueQ0KICAgKiBAcGFyYW1zIENPTk4gLSBJbnB1dCBzaGlwbWVudCBudW1iZXINCiAgICogQHBhcmFtcyBMSU5FUyAtIGNvbnRhaW5pbmcgdGhlIGxpbmVzIHRvIGJlIGluc2VydGVkDQogICAqIEByZXR1cm4gbm90aGluZw0KICAqLw0KICB2b2lkIGluc2VydERhdGFUb0VYVEQ4MChpbnQgQ09OTywgbG9uZyBETElYLCBBcnJheUxpc3Q8TWFwPFN0cmluZywgU3RyaW5nPj4gTElORVMpIHsNCiAgICBEQkFjdGlvbiBsaW5lUXVlcnkgPSBkYXRhYmFzZS50YWJsZSgiRVhURDgwIikuaW5kZXgoIjAwIikuYnVpbGQoKTsNCiAgICBEQkNvbnRhaW5lciBsaW5lQ29udGFpbmVyID0gbGluZVF1ZXJ5LmdldENvbnRhaW5lcigpOw0KICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENPTk8iLCBDT05PKTsNCiAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhETElYIiwgRExJWCk7DQogICAgDQogICAgREJBY3Rpb24gaGVhZFF1ZXJ5ID0gZGF0YWJhc2UudGFibGUoIkVYVEQ3OSIpLmluZGV4KCIwMCIpLmJ1aWxkKCk7DQogICAgREJDb250YWluZXIgaGVhZENvbnRhaW5lciA9IGhlYWRRdWVyeS5nZXRDb250YWluZXIoKTsNCiAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhDT05PIiwgQ09OTyk7DQogICAgaGVhZENvbnRhaW5lci5zZXQoIkVYRExJWCIsIERMSVgpOw0KICAgIA0KICAgIGZvciAoaW50IGk9MDsgaTxMSU5FUy5zaXplKCk7IGkrKykgew0KICAgICAgTWFwPFN0cmluZywgU3RyaW5nPiByZWNvcmQgPSAoTWFwPFN0cmluZywgU3RyaW5nPikgTElORVNbaV07DQogICAgICANCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWENPTkEiLCByZWNvcmQuQ09OQSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhQQUdFIiwgcmVjb3JkLlBBR0UgYXMgaW50KTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWE9STk8iLCByZWNvcmQuT1JOTyk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhQT05SIiwgcmVjb3JkLlBPTlIgYXMgaW50KTsNCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWElUTk8iLCByZWNvcmQuSVROTyk7DQogICAgICANCiAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWFJHRFQiLCBMb2NhbERhdGUubm93KCkuZm9ybWF0KERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybigieXl5eU1NZGQiKSkudG9JbnRlZ2VyKCkpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYUkdUTSIsIExvY2FsVGltZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJISG1tc3MiKSkudG9JbnRlZ2VyKCkpOw0KICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYTE1EVCIsIExvY2FsRGF0ZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJ5eXl5TU1kZCIpKS50b0ludGVnZXIoKSk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhDSE5PIiwgMCk7DQogICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhDSElEIiwgcHJvZ3JhbS5nZXRVc2VyKCkpOw0KICAgICAgDQogICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhDT05BIiwgcmVjb3JkLkNPTkEpOw0KICAgICAgaGVhZENvbnRhaW5lci5zZXQoIkVYUEFHRSIsIHJlY29yZC5QQUdFIGFzIGludCk7DQogICAgICANCiAgICAgIGhlYWRDb250YWluZXIuc2V0KCJFWFJHRFQiLCBMb2NhbERhdGUubm93KCkuZm9ybWF0KERhdGVUaW1lRm9ybWF0dGVyLm9mUGF0dGVybigieXl5eU1NZGQiKSkudG9JbnRlZ2VyKCkpOw0KICAgICAgaGVhZENvbnRhaW5lci5zZXQoIkVYUkdUTSIsIExvY2FsVGltZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJISG1tc3MiKSkudG9JbnRlZ2VyKCkpOw0KICAgICAgaGVhZENvbnRhaW5lci5zZXQoIkVYTE1EVCIsIExvY2FsRGF0ZS5ub3coKS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJ5eXl5TU1kZCIpKS50b0ludGVnZXIoKSk7DQogICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhDSE5PIiwgMCk7DQogICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhDSElEIiwgcHJvZ3JhbS5nZXRVc2VyKCkpOw0KICAgICAgDQogICAgICBpZihjaGVja0NPTkEocmVjb3JkLkNPTkEpKSB7DQogICAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWFRZUEUiLCAxKTsNCiAgICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQU1OVCIsIDk5Ljk5KTsNCiAgICAgICAgaGVhZENvbnRhaW5lci5zZXQoIkVYVFlQRSIsIDEpOw0KICAgICAgICANCiAgICAgICAgbGluZVF1ZXJ5Lmluc2VydChsaW5lQ29udGFpbmVyKTsNCiAgICAgICAgaGVhZFF1ZXJ5Lmluc2VydChoZWFkQ29udGFpbmVyKTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWFRZUEUiLCAxKTsNCiAgICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQU1OVCIsIDk5Ljk5KTsNCiAgICAgICAgaGVhZENvbnRhaW5lci5zZXQoIkVYVFlQRSIsIDEpOw0KICAgICAgICANCiAgICAgICAgbGluZVF1ZXJ5Lmluc2VydChsaW5lQ29udGFpbmVyKTsNCiAgICAgICAgaGVhZFF1ZXJ5Lmluc2VydChoZWFkQ29udGFpbmVyKTsNCiAgICAgICAgDQogICAgICAgIGxpbmVDb250YWluZXIuc2V0KCJFWFRZUEUiLCAyKTsNCiAgICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYQU1OVCIsIDApOw0KICAgICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhUWVBFIiwgMik7DQogICAgICAgIA0KICAgICAgICBsaW5lUXVlcnkuaW5zZXJ0KGxpbmVDb250YWluZXIpOw0KICAgICAgICBoZWFkUXVlcnkuaW5zZXJ0KGhlYWRDb250YWluZXIpOw0KICAgICAgICANCiAgICAgICAgbGluZUNvbnRhaW5lci5zZXQoIkVYVFlQRSIsIDMpOw0KICAgICAgICBsaW5lQ29udGFpbmVyLnNldCgiRVhBTU5UIiwgOTkuOTkpOw0KICAgICAgICBoZWFkQ29udGFpbmVyLnNldCgiRVhUWVBFIiwgMyk7DQogICAgICAgIA0KICAgICAgICBsaW5lUXVlcnkuaW5zZXJ0KGxpbmVDb250YWluZXIpOw0KICAgICAgICBoZWFkUXVlcnkuaW5zZXJ0KGhlYWRDb250YWluZXIpOw0KICAgICAgfQ0KICAgICANCiAgICB9DQogIH0NCiAgDQogIC8qKg0KICAgKiBEZWxldGUgYWxsIHJlY29yZHMgZGVwZW5kaW5nIG9uIENPTk4NCiAgICogQHBhcmFtcyBDT05PIC0gSW5wdXQgY29tcGFueQ0KICAgKiBAcGFyYW1zIENPTk4gLSBJbnB1dCBzaGlwbWVudCBudW1iZXINCiAgICogQHBhcmFtcyB0YWJsZSAtIElucHV0IFh0ZW5kIFRhYmxlDQogICAqIEByZXR1cm4gbm90aGluZw0KICAqLw0KICB2b2lkIGRlbGV0ZVJlY29yZHNCeUNPTk4oaW50IENPTk8sIGludCBDT05OLCBTdHJpbmcgdGFibGUpIHsNCiAgICBEQkFjdGlvbiBxdWVyeSA9IGRhdGFiYXNlLnRhYmxlKHRhYmxlKS5pbmRleCgiMDAiKS5idWlsZCgpOw0KICAgIERCQ29udGFpbmVyIGNvbnRhaW5lciA9IHF1ZXJ5LmNyZWF0ZUNvbnRhaW5lcigpOw0KICAgIGNvbnRhaW5lci5zZXQoIkVYQ09OTyIsIENPTk8pOw0KICAgIGNvbnRhaW5lci5zZXQoIkVYQ09OTiIsIENPTk4pOw0KICAgIA0KICAgIENsb3N1cmU8Pz4gZGVsZXRlUmVjb3JkcyA9IHtMb2NrZWRSZXN1bHQgcmVzdWx0IC0+DQogICAgICByZXN1bHQuZGVsZXRlKCk7DQogICAgfQ0KICAgIA0KICAgIHF1ZXJ5LnJlYWRBbGxMb2NrKGNvbnRhaW5lciwgMiwgZGVsZXRlUmVjb3Jkcyk7DQogIH0NCiAgDQogIC8qKg0KICAgKiBEZWxldGUgYWxsIHJlY29yZHMgZGVwZW5kaW5nIG9uIERMSVgNCiAgICogQHBhcmFtcyBDT05PIC0gSW5wdXQgY29tcGFueQ0KICAgKiBAcGFyYW1zIERMSVggLSBJbnB1dCBkZWxpdmVyeSBudW1iZXINCiAgICogQHBhcmFtcyB0YWJsZSAtIElucHV0IFh0ZW5kIFRhYmxlDQogICAqIEByZXR1cm4gbm90aGluZw0KICAqLw0KICB2b2lkIGRlbGV0ZVJlY29yZHNCeURMSVgoaW50IENPTk8sIGxvbmcgRExJWCwgU3RyaW5nIHRhYmxlKSB7DQogICAgREJBY3Rpb24gcXVlcnkgPSBkYXRhYmFzZS50YWJsZSh0YWJsZSkuaW5kZXgoIjAwIikuYnVpbGQoKTsNCiAgICBEQkNvbnRhaW5lciBjb250YWluZXIgPSBxdWVyeS5jcmVhdGVDb250YWluZXIoKTsNCiAgICBjb250YWluZXIuc2V0KCJFWENPTk8iLCBDT05PKTsNCiAgICBjb250YWluZXIuc2V0KCJFWERMSVgiLCBETElYIGFzIGxvbmcpOw0KICAgIA0KICAgIENsb3N1cmU8Pz4gZGVsZXRlUmVjb3JkcyA9IHtMb2NrZWRSZXN1bHQgcmVzdWx0IC0+DQogICAgICByZXN1bHQuZGVsZXRlKCk7DQogICAgfQ0KICAgIA0KICAgIHF1ZXJ5LnJlYWRBbGxMb2NrKGNvbnRhaW5lciwgMiwgZGVsZXRlUmVjb3Jkcyk7DQogIH0NCiAgDQp9DQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQo="}}}